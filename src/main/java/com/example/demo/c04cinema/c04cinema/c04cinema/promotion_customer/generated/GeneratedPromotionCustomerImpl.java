package com.example.demo.c04cinema.c04cinema.c04cinema.promotion_customer.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.customer.Customer;
import com.example.demo.c04cinema.c04cinema.c04cinema.promotion.Promotion;
import com.example.demo.c04cinema.c04cinema.c04cinema.promotion_customer.PromotionCustomer;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.promotion_customer.PromotionCustomer}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedPromotionCustomerImpl implements PromotionCustomer {
    
    private int id;
    private Integer promotionId;
    private Integer customerId;
    private String promotionCode;
    
    protected GeneratedPromotionCustomerImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public OptionalInt getPromotionId() {
        return OptionalUtil.ofNullable(promotionId);
    }
    
    @Override
    public OptionalInt getCustomerId() {
        return OptionalUtil.ofNullable(customerId);
    }
    
    @Override
    public Optional<String> getPromotionCode() {
        return Optional.ofNullable(promotionCode);
    }
    
    @Override
    public PromotionCustomer setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public PromotionCustomer setPromotionId(Integer promotionId) {
        this.promotionId = promotionId;
        return this;
    }
    
    @Override
    public PromotionCustomer setCustomerId(Integer customerId) {
        this.customerId = customerId;
        return this;
    }
    
    @Override
    public PromotionCustomer setPromotionCode(String promotionCode) {
        this.promotionCode = promotionCode;
        return this;
    }
    
    @Override
    public Optional<Promotion> findPromotionId(Manager<Promotion> foreignManager) {
        if (getPromotionId().isPresent()) {
            return foreignManager.stream().filter(Promotion.ID.equal(getPromotionId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<Customer> findCustomerId(Manager<Customer> foreignManager) {
        if (getCustomerId().isPresent()) {
            return foreignManager.stream().filter(Customer.ID.equal(getCustomerId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "            + Objects.toString(getId()));
        sj.add("promotionId = "   + Objects.toString(OptionalUtil.unwrap(getPromotionId())));
        sj.add("customerId = "    + Objects.toString(OptionalUtil.unwrap(getCustomerId())));
        sj.add("promotionCode = " + Objects.toString(OptionalUtil.unwrap(getPromotionCode())));
        return "PromotionCustomerImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof PromotionCustomer)) { return false; }
        final PromotionCustomer thatPromotionCustomer = (PromotionCustomer)that;
        if (this.getId() != thatPromotionCustomer.getId()) { return false; }
        if (!Objects.equals(this.getPromotionId(), thatPromotionCustomer.getPromotionId())) { return false; }
        if (!Objects.equals(this.getCustomerId(), thatPromotionCustomer.getCustomerId())) { return false; }
        if (!Objects.equals(this.getPromotionCode(), thatPromotionCustomer.getPromotionCode())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPromotionId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getCustomerId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPromotionCode()));
        return hash;
    }
}