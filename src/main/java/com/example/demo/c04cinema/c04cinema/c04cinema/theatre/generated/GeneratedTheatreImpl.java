package com.example.demo.c04cinema.c04cinema.c04cinema.theatre.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.location.Location;
import com.example.demo.c04cinema.c04cinema.c04cinema.theatre.Theatre;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.theatre.Theatre}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedTheatreImpl implements Theatre {
    
    private int id;
    private Integer locationId;
    private String name;
    private Integer adminId;
    
    protected GeneratedTheatreImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public OptionalInt getLocationId() {
        return OptionalUtil.ofNullable(locationId);
    }
    
    @Override
    public Optional<String> getName() {
        return Optional.ofNullable(name);
    }
    
    @Override
    public OptionalInt getAdminId() {
        return OptionalUtil.ofNullable(adminId);
    }
    
    @Override
    public Theatre setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Theatre setLocationId(Integer locationId) {
        this.locationId = locationId;
        return this;
    }
    
    @Override
    public Theatre setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public Theatre setAdminId(Integer adminId) {
        this.adminId = adminId;
        return this;
    }
    
    @Override
    public Optional<Location> findLocationId(Manager<Location> foreignManager) {
        if (getLocationId().isPresent()) {
            return foreignManager.stream().filter(Location.ID.equal(getLocationId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "         + Objects.toString(getId()));
        sj.add("locationId = " + Objects.toString(OptionalUtil.unwrap(getLocationId())));
        sj.add("name = "       + Objects.toString(OptionalUtil.unwrap(getName())));
        sj.add("adminId = "    + Objects.toString(OptionalUtil.unwrap(getAdminId())));
        return "TheatreImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Theatre)) { return false; }
        final Theatre thatTheatre = (Theatre)that;
        if (this.getId() != thatTheatre.getId()) { return false; }
        if (!Objects.equals(this.getLocationId(), thatTheatre.getLocationId())) { return false; }
        if (!Objects.equals(this.getName(), thatTheatre.getName())) { return false; }
        if (!Objects.equals(this.getAdminId(), thatTheatre.getAdminId())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getLocationId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getName()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getAdminId()));
        return hash;
    }
}