package com.example.demo.c04cinema.c04cinema.c04cinema.combo.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.combo.Combo;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalDouble;

/**
 * The generated base for the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.combo.Combo}-interface
 * representing entities of the {@code combo}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedCombo {
    
    /**
     * This Field corresponds to the {@link Combo} field that can be obtained
     * using the {@link Combo#getId()} method.
     */
    IntField<Combo, Integer> ID = IntField.create(
        Identifier.ID,
        Combo::getId,
        Combo::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Combo} field that can be obtained
     * using the {@link Combo#getName()} method.
     */
    StringField<Combo, String> NAME = StringField.create(
        Identifier.NAME,
        o -> OptionalUtil.unwrap(o.getName()),
        Combo::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Combo} field that can be obtained
     * using the {@link Combo#getPrice()} method.
     */
    ComparableField<Combo, Double, Double> PRICE = ComparableField.create(
        Identifier.PRICE,
        o -> OptionalUtil.unwrap(o.getPrice()),
        Combo::setPrice,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Combo} field that can be obtained
     * using the {@link Combo#getImgeUrl()} method.
     */
    StringField<Combo, String> IMGE_URL = StringField.create(
        Identifier.IMGE_URL,
        o -> OptionalUtil.unwrap(o.getImgeUrl()),
        Combo::setImgeUrl,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Combo} field that can be obtained
     * using the {@link Combo#getDescription()} method.
     */
    StringField<Combo, String> DESCRIPTION = StringField.create(
        Identifier.DESCRIPTION,
        o -> OptionalUtil.unwrap(o.getDescription()),
        Combo::setDescription,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Combo. The id field corresponds to the database
     * column c04cinema.c04cinema.combo.id.
     * 
     * @return the id of this Combo
     */
    int getId();
    
    /**
     * Returns the name of this Combo. The name field corresponds to the
     * database column c04cinema.c04cinema.combo.name.
     * 
     * @return the name of this Combo
     */
    Optional<String> getName();
    
    /**
     * Returns the price of this Combo. The price field corresponds to the
     * database column c04cinema.c04cinema.combo.price.
     * 
     * @return the price of this Combo
     */
    OptionalDouble getPrice();
    
    /**
     * Returns the imgeUrl of this Combo. The imgeUrl field corresponds to the
     * database column c04cinema.c04cinema.combo.imge_url.
     * 
     * @return the imgeUrl of this Combo
     */
    Optional<String> getImgeUrl();
    
    /**
     * Returns the description of this Combo. The description field corresponds
     * to the database column c04cinema.c04cinema.combo.description.
     * 
     * @return the description of this Combo
     */
    Optional<String> getDescription();
    
    /**
     * Sets the id of this Combo. The id field corresponds to the database
     * column c04cinema.c04cinema.combo.id.
     * 
     * @param id to set of this Combo
     * @return   this Combo instance
     */
    Combo setId(int id);
    
    /**
     * Sets the name of this Combo. The name field corresponds to the database
     * column c04cinema.c04cinema.combo.name.
     * 
     * @param name to set of this Combo
     * @return     this Combo instance
     */
    Combo setName(String name);
    
    /**
     * Sets the price of this Combo. The price field corresponds to the database
     * column c04cinema.c04cinema.combo.price.
     * 
     * @param price to set of this Combo
     * @return      this Combo instance
     */
    Combo setPrice(Double price);
    
    /**
     * Sets the imgeUrl of this Combo. The imgeUrl field corresponds to the
     * database column c04cinema.c04cinema.combo.imge_url.
     * 
     * @param imgeUrl to set of this Combo
     * @return        this Combo instance
     */
    Combo setImgeUrl(String imgeUrl);
    
    /**
     * Sets the description of this Combo. The description field corresponds to
     * the database column c04cinema.c04cinema.combo.description.
     * 
     * @param description to set of this Combo
     * @return            this Combo instance
     */
    Combo setDescription(String description);
    
    enum Identifier implements ColumnIdentifier<Combo> {
        
        ID          ("id"),
        NAME        ("name"),
        PRICE       ("price"),
        IMGE_URL    ("imge_url"),
        DESCRIPTION ("description");
        
        private final String columnId;
        private final TableIdentifier<Combo> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "c04cinema";
        }
        
        @Override
        public String getSchemaId() {
            return "c04cinema";
        }
        
        @Override
        public String getTableId() {
            return "combo";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Combo> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}