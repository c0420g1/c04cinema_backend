package com.example.demo.c04cinema.c04cinema.c04cinema.staff.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.account.Account;
import com.example.demo.c04cinema.c04cinema.c04cinema.position.Position;
import com.example.demo.c04cinema.c04cinema.c04cinema.staff.Staff;
import com.example.demo.c04cinema.c04cinema.c04cinema.theatre.Theatre;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.staff.Staff}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedStaffImpl implements Staff {
    
    private int id;
    private String name;
    private String address;
    private Integer accountId;
    private Integer theatreId;
    private String email;
    private String phone;
    private String cardid;
    private Timestamp birthday;
    private Double salary;
    private Integer positionId;
    private Byte isactive;
    private String code;
    
    protected GeneratedStaffImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public Optional<String> getName() {
        return Optional.ofNullable(name);
    }
    
    @Override
    public Optional<String> getAddress() {
        return Optional.ofNullable(address);
    }
    
    @Override
    public OptionalInt getAccountId() {
        return OptionalUtil.ofNullable(accountId);
    }
    
    @Override
    public OptionalInt getTheatreId() {
        return OptionalUtil.ofNullable(theatreId);
    }
    
    @Override
    public Optional<String> getEmail() {
        return Optional.ofNullable(email);
    }
    
    @Override
    public Optional<String> getPhone() {
        return Optional.ofNullable(phone);
    }
    
    @Override
    public Optional<String> getCardid() {
        return Optional.ofNullable(cardid);
    }
    
    @Override
    public Optional<Timestamp> getBirthday() {
        return Optional.ofNullable(birthday);
    }
    
    @Override
    public OptionalDouble getSalary() {
        return OptionalUtil.ofNullable(salary);
    }
    
    @Override
    public OptionalInt getPositionId() {
        return OptionalUtil.ofNullable(positionId);
    }
    
    @Override
    public Optional<Byte> getIsactive() {
        return Optional.ofNullable(isactive);
    }
    
    @Override
    public Optional<String> getCode() {
        return Optional.ofNullable(code);
    }
    
    @Override
    public Staff setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Staff setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public Staff setAddress(String address) {
        this.address = address;
        return this;
    }
    
    @Override
    public Staff setAccountId(Integer accountId) {
        this.accountId = accountId;
        return this;
    }
    
    @Override
    public Staff setTheatreId(Integer theatreId) {
        this.theatreId = theatreId;
        return this;
    }
    
    @Override
    public Staff setEmail(String email) {
        this.email = email;
        return this;
    }
    
    @Override
    public Staff setPhone(String phone) {
        this.phone = phone;
        return this;
    }
    
    @Override
    public Staff setCardid(String cardid) {
        this.cardid = cardid;
        return this;
    }
    
    @Override
    public Staff setBirthday(Timestamp birthday) {
        this.birthday = birthday;
        return this;
    }
    
    @Override
    public Staff setSalary(Double salary) {
        this.salary = salary;
        return this;
    }
    
    @Override
    public Staff setPositionId(Integer positionId) {
        this.positionId = positionId;
        return this;
    }
    
    @Override
    public Staff setIsactive(Byte isactive) {
        this.isactive = isactive;
        return this;
    }
    
    @Override
    public Staff setCode(String code) {
        this.code = code;
        return this;
    }
    
    @Override
    public Optional<Account> findAccountId(Manager<Account> foreignManager) {
        if (getAccountId().isPresent()) {
            return foreignManager.stream().filter(Account.ID.equal(getAccountId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<Theatre> findTheatreId(Manager<Theatre> foreignManager) {
        if (getTheatreId().isPresent()) {
            return foreignManager.stream().filter(Theatre.ID.equal(getTheatreId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<Position> findPositionId(Manager<Position> foreignManager) {
        if (getPositionId().isPresent()) {
            return foreignManager.stream().filter(Position.ID.equal(getPositionId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "         + Objects.toString(getId()));
        sj.add("name = "       + Objects.toString(OptionalUtil.unwrap(getName())));
        sj.add("address = "    + Objects.toString(OptionalUtil.unwrap(getAddress())));
        sj.add("accountId = "  + Objects.toString(OptionalUtil.unwrap(getAccountId())));
        sj.add("theatreId = "  + Objects.toString(OptionalUtil.unwrap(getTheatreId())));
        sj.add("email = "      + Objects.toString(OptionalUtil.unwrap(getEmail())));
        sj.add("phone = "      + Objects.toString(OptionalUtil.unwrap(getPhone())));
        sj.add("cardid = "     + Objects.toString(OptionalUtil.unwrap(getCardid())));
        sj.add("birthday = "   + Objects.toString(OptionalUtil.unwrap(getBirthday())));
        sj.add("salary = "     + Objects.toString(OptionalUtil.unwrap(getSalary())));
        sj.add("positionId = " + Objects.toString(OptionalUtil.unwrap(getPositionId())));
        sj.add("isactive = "   + Objects.toString(OptionalUtil.unwrap(getIsactive())));
        sj.add("code = "       + Objects.toString(OptionalUtil.unwrap(getCode())));
        return "StaffImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Staff)) { return false; }
        final Staff thatStaff = (Staff)that;
        if (this.getId() != thatStaff.getId()) { return false; }
        if (!Objects.equals(this.getName(), thatStaff.getName())) { return false; }
        if (!Objects.equals(this.getAddress(), thatStaff.getAddress())) { return false; }
        if (!Objects.equals(this.getAccountId(), thatStaff.getAccountId())) { return false; }
        if (!Objects.equals(this.getTheatreId(), thatStaff.getTheatreId())) { return false; }
        if (!Objects.equals(this.getEmail(), thatStaff.getEmail())) { return false; }
        if (!Objects.equals(this.getPhone(), thatStaff.getPhone())) { return false; }
        if (!Objects.equals(this.getCardid(), thatStaff.getCardid())) { return false; }
        if (!Objects.equals(this.getBirthday(), thatStaff.getBirthday())) { return false; }
        if (!Objects.equals(this.getSalary(), thatStaff.getSalary())) { return false; }
        if (!Objects.equals(this.getPositionId(), thatStaff.getPositionId())) { return false; }
        if (!Objects.equals(this.getIsactive(), thatStaff.getIsactive())) { return false; }
        if (!Objects.equals(this.getCode(), thatStaff.getCode())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getName()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getAddress()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getAccountId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getTheatreId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getEmail()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPhone()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getCardid()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getBirthday()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getSalary()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPositionId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getIsactive()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getCode()));
        return hash;
    }
}