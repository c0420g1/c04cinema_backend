package com.example.demo.c04cinema.c04cinema.c04cinema.comment.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.comment.Comment;
import com.example.demo.c04cinema.c04cinema.c04cinema.comment.CommentImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.util.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.comment.Comment} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedCommentSqlAdapter implements SqlAdapter<Comment> {
    
    private final TableIdentifier<Comment> tableIdentifier;
    
    protected GeneratedCommentSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("c04cinema", "c04cinema", "comment");
    }
    
    protected Comment apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(               resultSet.getInt(1 + offset))
            .setCustomerId(       getInt(resultSet, 2 + offset))
            .setMovieId(          getInt(resultSet, 3 + offset))
            .setComment(          resultSet.getString(4 + offset))
            .setCreateDate(       resultSet.getTimestamp(5 + offset))
            .setReplyOneCustomId( getInt(resultSet, 6 + offset))
            .setLike(             getInt(resultSet, 7 + offset))
            .setEmotion(          resultSet.getString(8 + offset))
            .setReplyTwoCustomId( getInt(resultSet, 9 + offset))
            ;
    }
    
    protected CommentImpl createEntity() {
        return new CommentImpl();
    }
    
    @Override
    public TableIdentifier<Comment> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Comment> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Comment> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}