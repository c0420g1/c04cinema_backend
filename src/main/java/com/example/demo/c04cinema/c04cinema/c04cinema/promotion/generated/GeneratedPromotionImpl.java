package com.example.demo.c04cinema.c04cinema.c04cinema.promotion.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.customer.Customer;
import com.example.demo.c04cinema.c04cinema.c04cinema.movie.Movie;
import com.example.demo.c04cinema.c04cinema.c04cinema.promotion.Promotion;
import com.example.demo.c04cinema.c04cinema.c04cinema.show.Show;
import com.example.demo.c04cinema.c04cinema.c04cinema.staff.Staff;
import com.example.demo.c04cinema.c04cinema.c04cinema.theatre.Theatre;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.sql.Date;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.promotion.Promotion}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedPromotionImpl implements Promotion {
    
    private int id;
    private String code;
    private String name;
    private Double discount;
    private String description;
    private Date startDate;
    private Date endDate;
    private Integer showId;
    private Integer moveId;
    private Integer theatreId;
    private Integer customerId;
    private Integer staffId;
    private Double price;
    private String picture;
    
    protected GeneratedPromotionImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public Optional<String> getCode() {
        return Optional.ofNullable(code);
    }
    
    @Override
    public Optional<String> getName() {
        return Optional.ofNullable(name);
    }
    
    @Override
    public OptionalDouble getDiscount() {
        return OptionalUtil.ofNullable(discount);
    }
    
    @Override
    public Optional<String> getDescription() {
        return Optional.ofNullable(description);
    }
    
    @Override
    public Optional<Date> getStartDate() {
        return Optional.ofNullable(startDate);
    }
    
    @Override
    public Optional<Date> getEndDate() {
        return Optional.ofNullable(endDate);
    }
    
    @Override
    public OptionalInt getShowId() {
        return OptionalUtil.ofNullable(showId);
    }
    
    @Override
    public OptionalInt getMoveId() {
        return OptionalUtil.ofNullable(moveId);
    }
    
    @Override
    public OptionalInt getTheatreId() {
        return OptionalUtil.ofNullable(theatreId);
    }
    
    @Override
    public OptionalInt getCustomerId() {
        return OptionalUtil.ofNullable(customerId);
    }
    
    @Override
    public OptionalInt getStaffId() {
        return OptionalUtil.ofNullable(staffId);
    }
    
    @Override
    public OptionalDouble getPrice() {
        return OptionalUtil.ofNullable(price);
    }
    
    @Override
    public Optional<String> getPicture() {
        return Optional.ofNullable(picture);
    }
    
    @Override
    public Promotion setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Promotion setCode(String code) {
        this.code = code;
        return this;
    }
    
    @Override
    public Promotion setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public Promotion setDiscount(Double discount) {
        this.discount = discount;
        return this;
    }
    
    @Override
    public Promotion setDescription(String description) {
        this.description = description;
        return this;
    }
    
    @Override
    public Promotion setStartDate(Date startDate) {
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public Promotion setEndDate(Date endDate) {
        this.endDate = endDate;
        return this;
    }
    
    @Override
    public Promotion setShowId(Integer showId) {
        this.showId = showId;
        return this;
    }
    
    @Override
    public Promotion setMoveId(Integer moveId) {
        this.moveId = moveId;
        return this;
    }
    
    @Override
    public Promotion setTheatreId(Integer theatreId) {
        this.theatreId = theatreId;
        return this;
    }
    
    @Override
    public Promotion setCustomerId(Integer customerId) {
        this.customerId = customerId;
        return this;
    }
    
    @Override
    public Promotion setStaffId(Integer staffId) {
        this.staffId = staffId;
        return this;
    }
    
    @Override
    public Promotion setPrice(Double price) {
        this.price = price;
        return this;
    }
    
    @Override
    public Promotion setPicture(String picture) {
        this.picture = picture;
        return this;
    }
    
    @Override
    public Optional<Show> findShowId(Manager<Show> foreignManager) {
        if (getShowId().isPresent()) {
            return foreignManager.stream().filter(Show.ID.equal(getShowId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<Movie> findMoveId(Manager<Movie> foreignManager) {
        if (getMoveId().isPresent()) {
            return foreignManager.stream().filter(Movie.ID.equal(getMoveId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<Theatre> findTheatreId(Manager<Theatre> foreignManager) {
        if (getTheatreId().isPresent()) {
            return foreignManager.stream().filter(Theatre.ID.equal(getTheatreId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<Customer> findCustomerId(Manager<Customer> foreignManager) {
        if (getCustomerId().isPresent()) {
            return foreignManager.stream().filter(Customer.ID.equal(getCustomerId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<Staff> findStaffId(Manager<Staff> foreignManager) {
        if (getStaffId().isPresent()) {
            return foreignManager.stream().filter(Staff.ID.equal(getStaffId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "          + Objects.toString(getId()));
        sj.add("code = "        + Objects.toString(OptionalUtil.unwrap(getCode())));
        sj.add("name = "        + Objects.toString(OptionalUtil.unwrap(getName())));
        sj.add("discount = "    + Objects.toString(OptionalUtil.unwrap(getDiscount())));
        sj.add("description = " + Objects.toString(OptionalUtil.unwrap(getDescription())));
        sj.add("startDate = "   + Objects.toString(OptionalUtil.unwrap(getStartDate())));
        sj.add("endDate = "     + Objects.toString(OptionalUtil.unwrap(getEndDate())));
        sj.add("showId = "      + Objects.toString(OptionalUtil.unwrap(getShowId())));
        sj.add("moveId = "      + Objects.toString(OptionalUtil.unwrap(getMoveId())));
        sj.add("theatreId = "   + Objects.toString(OptionalUtil.unwrap(getTheatreId())));
        sj.add("customerId = "  + Objects.toString(OptionalUtil.unwrap(getCustomerId())));
        sj.add("staffId = "     + Objects.toString(OptionalUtil.unwrap(getStaffId())));
        sj.add("price = "       + Objects.toString(OptionalUtil.unwrap(getPrice())));
        sj.add("picture = "     + Objects.toString(OptionalUtil.unwrap(getPicture())));
        return "PromotionImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Promotion)) { return false; }
        final Promotion thatPromotion = (Promotion)that;
        if (this.getId() != thatPromotion.getId()) { return false; }
        if (!Objects.equals(this.getCode(), thatPromotion.getCode())) { return false; }
        if (!Objects.equals(this.getName(), thatPromotion.getName())) { return false; }
        if (!Objects.equals(this.getDiscount(), thatPromotion.getDiscount())) { return false; }
        if (!Objects.equals(this.getDescription(), thatPromotion.getDescription())) { return false; }
        if (!Objects.equals(this.getStartDate(), thatPromotion.getStartDate())) { return false; }
        if (!Objects.equals(this.getEndDate(), thatPromotion.getEndDate())) { return false; }
        if (!Objects.equals(this.getShowId(), thatPromotion.getShowId())) { return false; }
        if (!Objects.equals(this.getMoveId(), thatPromotion.getMoveId())) { return false; }
        if (!Objects.equals(this.getTheatreId(), thatPromotion.getTheatreId())) { return false; }
        if (!Objects.equals(this.getCustomerId(), thatPromotion.getCustomerId())) { return false; }
        if (!Objects.equals(this.getStaffId(), thatPromotion.getStaffId())) { return false; }
        if (!Objects.equals(this.getPrice(), thatPromotion.getPrice())) { return false; }
        if (!Objects.equals(this.getPicture(), thatPromotion.getPicture())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getCode()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getName()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getDiscount()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getDescription()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getStartDate()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getEndDate()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getShowId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getMoveId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getTheatreId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getCustomerId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getStaffId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPrice()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPicture()));
        return hash;
    }
}