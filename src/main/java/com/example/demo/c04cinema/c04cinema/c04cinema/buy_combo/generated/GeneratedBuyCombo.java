package com.example.demo.c04cinema.c04cinema.c04cinema.buy_combo.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.buy_combo.BuyCombo;
import com.example.demo.c04cinema.c04cinema.c04cinema.combo.Combo;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.buy_combo.BuyCombo}-interface
 * representing entities of the {@code buy_combo}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedBuyCombo {
    
    /**
     * This Field corresponds to the {@link BuyCombo} field that can be obtained
     * using the {@link BuyCombo#getId()} method.
     */
    IntField<BuyCombo, Integer> ID = IntField.create(
        Identifier.ID,
        BuyCombo::getId,
        BuyCombo::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link BuyCombo} field that can be obtained
     * using the {@link BuyCombo#getComboId()} method.
     */
    ComparableForeignKeyField<BuyCombo, Integer, Integer, Combo> COMBO_ID = ComparableForeignKeyField.create(
        Identifier.COMBO_ID,
        o -> OptionalUtil.unwrap(o.getComboId()),
        BuyCombo::setComboId,
        Combo.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link BuyCombo} field that can be obtained
     * using the {@link BuyCombo#getQuantity()} method.
     */
    ComparableField<BuyCombo, Integer, Integer> QUANTITY = ComparableField.create(
        Identifier.QUANTITY,
        o -> OptionalUtil.unwrap(o.getQuantity()),
        BuyCombo::setQuantity,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this BuyCombo. The id field corresponds to the database
     * column c04cinema.c04cinema.buy_combo.id.
     * 
     * @return the id of this BuyCombo
     */
    int getId();
    
    /**
     * Returns the comboId of this BuyCombo. The comboId field corresponds to
     * the database column c04cinema.c04cinema.buy_combo.combo_id.
     * 
     * @return the comboId of this BuyCombo
     */
    OptionalInt getComboId();
    
    /**
     * Returns the quantity of this BuyCombo. The quantity field corresponds to
     * the database column c04cinema.c04cinema.buy_combo.quantity.
     * 
     * @return the quantity of this BuyCombo
     */
    OptionalInt getQuantity();
    
    /**
     * Sets the id of this BuyCombo. The id field corresponds to the database
     * column c04cinema.c04cinema.buy_combo.id.
     * 
     * @param id to set of this BuyCombo
     * @return   this BuyCombo instance
     */
    BuyCombo setId(int id);
    
    /**
     * Sets the comboId of this BuyCombo. The comboId field corresponds to the
     * database column c04cinema.c04cinema.buy_combo.combo_id.
     * 
     * @param comboId to set of this BuyCombo
     * @return        this BuyCombo instance
     */
    BuyCombo setComboId(Integer comboId);
    
    /**
     * Sets the quantity of this BuyCombo. The quantity field corresponds to the
     * database column c04cinema.c04cinema.buy_combo.quantity.
     * 
     * @param quantity to set of this BuyCombo
     * @return         this BuyCombo instance
     */
    BuyCombo setQuantity(Integer quantity);
    
    /**
     * Queries the specified manager for the referenced Combo. If no such Combo
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Combo> findComboId(Manager<Combo> foreignManager);
    
    enum Identifier implements ColumnIdentifier<BuyCombo> {
        
        ID       ("id"),
        COMBO_ID ("combo_id"),
        QUANTITY ("quantity");
        
        private final String columnId;
        private final TableIdentifier<BuyCombo> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "c04cinema";
        }
        
        @Override
        public String getSchemaId() {
            return "c04cinema";
        }
        
        @Override
        public String getTableId() {
            return "buy_combo";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<BuyCombo> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}