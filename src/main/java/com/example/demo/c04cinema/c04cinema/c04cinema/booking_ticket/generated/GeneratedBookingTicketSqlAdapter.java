package com.example.demo.c04cinema.c04cinema.c04cinema.booking_ticket.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.booking_ticket.BookingTicket;
import com.example.demo.c04cinema.c04cinema.c04cinema.booking_ticket.BookingTicketImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.util.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.booking_ticket.BookingTicket}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedBookingTicketSqlAdapter implements SqlAdapter<BookingTicket> {
    
    private final TableIdentifier<BookingTicket> tableIdentifier;
    
    protected GeneratedBookingTicketSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("c04cinema", "c04cinema", "booking_ticket");
    }
    
    protected BookingTicket apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(           resultSet.getInt(1 + offset))
            .setCode(         resultSet.getString(2 + offset))
            .setShowId(       getInt(resultSet, 3 + offset))
            .setTicketTypeId( getInt(resultSet, 4 + offset))
            .setSeatId(       getInt(resultSet, 5 + offset))
            .setPromotionId(  getInt(resultSet, 6 + offset))
            .setAccountId(    getInt(resultSet, 7 + offset))
            .setPaymentId(    getInt(resultSet, 8 + offset))
            .setContactEmail( resultSet.getString(9 + offset))
            .setContactPhone( resultSet.getString(10 + offset))
            .setStatus(       getByte(resultSet, 11 + offset))
            .setPrice(        getDouble(resultSet, 12 + offset))
            .setIscancel(     getByte(resultSet, 13 + offset))
            .setBookingDate(  resultSet.getTimestamp(14 + offset))
            ;
    }
    
    protected BookingTicketImpl createEntity() {
        return new BookingTicketImpl();
    }
    
    @Override
    public TableIdentifier<BookingTicket> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, BookingTicket> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, BookingTicket> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}