package com.example.demo.c04cinema.c04cinema.c04cinema.theatre.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.location.Location;
import com.example.demo.c04cinema.c04cinema.c04cinema.theatre.Theatre;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.theatre.Theatre}-interface
 * representing entities of the {@code theatre}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedTheatre {
    
    /**
     * This Field corresponds to the {@link Theatre} field that can be obtained
     * using the {@link Theatre#getId()} method.
     */
    IntField<Theatre, Integer> ID = IntField.create(
        Identifier.ID,
        Theatre::getId,
        Theatre::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Theatre} field that can be obtained
     * using the {@link Theatre#getLocationId()} method.
     */
    ComparableForeignKeyField<Theatre, Integer, Integer, Location> LOCATION_ID = ComparableForeignKeyField.create(
        Identifier.LOCATION_ID,
        o -> OptionalUtil.unwrap(o.getLocationId()),
        Theatre::setLocationId,
        Location.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Theatre} field that can be obtained
     * using the {@link Theatre#getName()} method.
     */
    StringField<Theatre, String> NAME = StringField.create(
        Identifier.NAME,
        o -> OptionalUtil.unwrap(o.getName()),
        Theatre::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Theatre} field that can be obtained
     * using the {@link Theatre#getAdminId()} method.
     */
    ComparableField<Theatre, Integer, Integer> ADMIN_ID = ComparableField.create(
        Identifier.ADMIN_ID,
        o -> OptionalUtil.unwrap(o.getAdminId()),
        Theatre::setAdminId,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Theatre. The id field corresponds to the database
     * column c04cinema.c04cinema.theatre.id.
     * 
     * @return the id of this Theatre
     */
    int getId();
    
    /**
     * Returns the locationId of this Theatre. The locationId field corresponds
     * to the database column c04cinema.c04cinema.theatre.location_id.
     * 
     * @return the locationId of this Theatre
     */
    OptionalInt getLocationId();
    
    /**
     * Returns the name of this Theatre. The name field corresponds to the
     * database column c04cinema.c04cinema.theatre.name.
     * 
     * @return the name of this Theatre
     */
    Optional<String> getName();
    
    /**
     * Returns the adminId of this Theatre. The adminId field corresponds to the
     * database column c04cinema.c04cinema.theatre.admin_id.
     * 
     * @return the adminId of this Theatre
     */
    OptionalInt getAdminId();
    
    /**
     * Sets the id of this Theatre. The id field corresponds to the database
     * column c04cinema.c04cinema.theatre.id.
     * 
     * @param id to set of this Theatre
     * @return   this Theatre instance
     */
    Theatre setId(int id);
    
    /**
     * Sets the locationId of this Theatre. The locationId field corresponds to
     * the database column c04cinema.c04cinema.theatre.location_id.
     * 
     * @param locationId to set of this Theatre
     * @return           this Theatre instance
     */
    Theatre setLocationId(Integer locationId);
    
    /**
     * Sets the name of this Theatre. The name field corresponds to the database
     * column c04cinema.c04cinema.theatre.name.
     * 
     * @param name to set of this Theatre
     * @return     this Theatre instance
     */
    Theatre setName(String name);
    
    /**
     * Sets the adminId of this Theatre. The adminId field corresponds to the
     * database column c04cinema.c04cinema.theatre.admin_id.
     * 
     * @param adminId to set of this Theatre
     * @return        this Theatre instance
     */
    Theatre setAdminId(Integer adminId);
    
    /**
     * Queries the specified manager for the referenced Location. If no such
     * Location exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Location> findLocationId(Manager<Location> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Theatre> {
        
        ID          ("id"),
        LOCATION_ID ("location_id"),
        NAME        ("name"),
        ADMIN_ID    ("admin_id");
        
        private final String columnId;
        private final TableIdentifier<Theatre> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "c04cinema";
        }
        
        @Override
        public String getSchemaId() {
            return "c04cinema";
        }
        
        @Override
        public String getTableId() {
            return "theatre";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Theatre> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}