package com.example.demo.c04cinema.c04cinema.c04cinema.promotion.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.promotion.Promotion;
import com.example.demo.c04cinema.c04cinema.c04cinema.promotion.PromotionManager;
import com.example.demo.c04cinema.c04cinema.c04cinema.promotion.generated.GeneratedPromotion.Identifier;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.json.Json;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.field.Field;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;

import java.sql.Date;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for Promotion entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
public abstract class GeneratedPromotionController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired PromotionManager manager;
    protected JsonEncoder<Promotion> encoder;
    
    @PostConstruct
    void createPromotionEncoder() {
        encoder = jsonComponent.<Promotion>emptyEncoder()
            .put("id", Promotion.ID)
            .put("code", Promotion.CODE)
            .put("name", Promotion.NAME)
            .put("discount", Promotion.DISCOUNT)
            .put("description", Promotion.DESCRIPTION)
            .put("startDate", Promotion.START_DATE)
            .put("endDate", Promotion.END_DATE)
            .put("showId", Promotion.SHOW_ID)
            .put("moveId", Promotion.MOVE_ID)
            .put("theatreId", Promotion.THEATRE_ID)
            .put("customerId", Promotion.CUSTOMER_ID)
            .put("staffId", Promotion.STAFF_ID)
            .put("price", Promotion.PRICE)
            .put("picture", Promotion.PICTURE)
            .build();
    }
    
    @GetMapping(path = "/promotion", produces = "application/json")
    public String get(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return getHelper(
            ControllerUtil.parseFilters(filters, PromotionFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, PromotionSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    @ResponseStatus(code = HttpStatus.CREATED)
    @PostMapping(path = "/promotion", consumes = "application/json")
    public void create(
            @RequestBody @Validated CreateBody createBody) {
        manager.persist(manager.create()
            .setCode(createBody.getCode())
            .setName(createBody.getName())
            .setDiscount(createBody.getDiscount())
            .setDescription(createBody.getDescription())
            .setStartDate(createBody.getStartDate())
            .setEndDate(createBody.getEndDate())
            .setShowId(createBody.getShowId())
            .setMoveId(createBody.getMoveId())
            .setTheatreId(createBody.getTheatreId())
            .setCustomerId(createBody.getCustomerId())
            .setStaffId(createBody.getStaffId())
            .setPrice(createBody.getPrice())
            .setPicture(createBody.getPicture())
        );
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @PatchMapping(path = "/promotion/{id}", consumes = "application/json")
    public void update(
            @PathVariable(name = "id") int id,
            @RequestBody @Validated UpdateBody updateBody) {
        manager.stream()
            .filter(Promotion.ID.equal(id))
            .map(promotion -> {
                promotion.setCode(updateBody.getCode());
                promotion.setName(updateBody.getName());
                promotion.setDiscount(updateBody.getDiscount());
                promotion.setDescription(updateBody.getDescription());
                promotion.setStartDate(updateBody.getStartDate());
                promotion.setEndDate(updateBody.getEndDate());
                promotion.setShowId(updateBody.getShowId());
                promotion.setMoveId(updateBody.getMoveId());
                promotion.setTheatreId(updateBody.getTheatreId());
                promotion.setCustomerId(updateBody.getCustomerId());
                promotion.setStaffId(updateBody.getStaffId());
                promotion.setPrice(updateBody.getPrice());
                promotion.setPicture(updateBody.getPicture());
                return promotion;
        }).forEach(manager.updater());
    }
    
    @ResponseStatus(code = HttpStatus.NO_CONTENT)
    @DeleteMapping(path = "/promotion/{id}")
    public void delete(
            @PathVariable(name = "id") int id) {
        manager.stream()
            .filter(Promotion.ID.equal(id))
            .forEach(manager.remover());
    }
    
    @ExceptionHandler(JsonMappingException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleMissingValueError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: missing required fields");
        
        return Json.toJson(error, true);
    }
    
    @ExceptionHandler(JsonParseException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleInvalidJsonError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: invalid JSON syntax");
        
        return Json.toJson(error, true);
    }
    
    protected final Set<Identifier> parseColumns(String jsonColumnList) {
        try {
            @SuppressWarnings("unchecked")
            final List<String> parsed = (List<String>) Json.fromJson(jsonColumnList);
            final Set<GeneratedPromotion.Identifier> result = EnumSet.noneOf(GeneratedPromotion.Identifier.class);
            parsed.stream().map(this::parseColumn).forEach(result::add);
            return result;
        } catch (final ClassCastException ex) {
            throw new IllegalArgumentException("Error in parsed JSON.");
        }
    }
    
    protected final Identifier parseColumn(String jsonColumn) {
        switch (jsonColumn) {
            case "id":          return GeneratedPromotion.Identifier.ID;
            case "code":        return GeneratedPromotion.Identifier.CODE;
            case "name":        return GeneratedPromotion.Identifier.NAME;
            case "discount":    return GeneratedPromotion.Identifier.DISCOUNT;
            case "description": return GeneratedPromotion.Identifier.DESCRIPTION;
            case "startDate":   return GeneratedPromotion.Identifier.START_DATE;
            case "endDate":     return GeneratedPromotion.Identifier.END_DATE;
            case "showId":      return GeneratedPromotion.Identifier.SHOW_ID;
            case "moveId":      return GeneratedPromotion.Identifier.MOVE_ID;
            case "theatreId":   return GeneratedPromotion.Identifier.THEATRE_ID;
            case "customerId":  return GeneratedPromotion.Identifier.CUSTOMER_ID;
            case "staffId":     return GeneratedPromotion.Identifier.STAFF_ID;
            case "price":       return GeneratedPromotion.Identifier.PRICE;
            case "picture":     return GeneratedPromotion.Identifier.PICTURE;
            default: throw new IllegalArgumentException(
                "Unknown column '" + jsonColumn + "'."
            );
        }
    }
    
    protected final Field<Promotion> fieldOf(Identifier columnId) {
        switch (columnId) {
            case ID:          return Promotion.ID;
            case CODE:        return Promotion.CODE;
            case NAME:        return Promotion.NAME;
            case DISCOUNT:    return Promotion.DISCOUNT;
            case DESCRIPTION: return Promotion.DESCRIPTION;
            case START_DATE:  return Promotion.START_DATE;
            case END_DATE:    return Promotion.END_DATE;
            case SHOW_ID:     return Promotion.SHOW_ID;
            case MOVE_ID:     return Promotion.MOVE_ID;
            case THEATRE_ID:  return Promotion.THEATRE_ID;
            case CUSTOMER_ID: return Promotion.CUSTOMER_ID;
            case STAFF_ID:    return Promotion.STAFF_ID;
            case PRICE:       return Promotion.PRICE;
            case PICTURE:     return Promotion.PICTURE;
            default: throw new IllegalArgumentException(
                "Unknown column '" + columnId + "'."
            );
        }
    }
    
    protected String getHelper(
            List<Predicate<Promotion>> predicates,
            List<Comparator<Promotion>> sorters,
            long start,
            long limit) {
        Stream<Promotion> stream = manager.stream();
        
        for (final Predicate<Promotion> predicate : predicates) {
            stream = stream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<Promotion>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        return stream
            .skip(start)
            .limit(limit)
            .collect(JsonCollectors.toList(encoder));
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public static final class PromotionFilter extends AbstractFilter<Promotion> {
        
        public PromotionFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<Promotion> toPredicate() {
            switch (property()) {
                case "id" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Promotion.ID.equal(v);
                        case "ne"   : return Promotion.ID.notEqual(v);
                        case "lt"   : return Promotion.ID.lessThan(v);
                        case "le"   : return Promotion.ID.lessOrEqual(v);
                        case "gt"   : return Promotion.ID.greaterThan(v);
                        case "ge"   : return Promotion.ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Promotion.id."
                        );
                    }
                }
                case "code" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Promotion.CODE.equal(v);
                        case "ne"   : return Promotion.CODE.notEqual(v);
                        case "lt"   : return Promotion.CODE.lessThan(v);
                        case "le"   : return Promotion.CODE.lessOrEqual(v);
                        case "gt"   : return Promotion.CODE.greaterThan(v);
                        case "ge"   : return Promotion.CODE.greaterOrEqual(v);
                        case "like" : return Promotion.CODE.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Promotion.code."
                        );
                    }
                }
                case "name" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Promotion.NAME.equal(v);
                        case "ne"   : return Promotion.NAME.notEqual(v);
                        case "lt"   : return Promotion.NAME.lessThan(v);
                        case "le"   : return Promotion.NAME.lessOrEqual(v);
                        case "gt"   : return Promotion.NAME.greaterThan(v);
                        case "ge"   : return Promotion.NAME.greaterOrEqual(v);
                        case "like" : return Promotion.NAME.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Promotion.name."
                        );
                    }
                }
                case "discount" : {
                    final Double v = Double.parseDouble(value());
                    switch (operator()) {
                        case "eq"   : return Promotion.DISCOUNT.equal(v);
                        case "ne"   : return Promotion.DISCOUNT.notEqual(v);
                        case "lt"   : return Promotion.DISCOUNT.lessThan(v);
                        case "le"   : return Promotion.DISCOUNT.lessOrEqual(v);
                        case "gt"   : return Promotion.DISCOUNT.greaterThan(v);
                        case "ge"   : return Promotion.DISCOUNT.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Promotion.discount."
                        );
                    }
                }
                case "description" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Promotion.DESCRIPTION.equal(v);
                        case "ne"   : return Promotion.DESCRIPTION.notEqual(v);
                        case "lt"   : return Promotion.DESCRIPTION.lessThan(v);
                        case "le"   : return Promotion.DESCRIPTION.lessOrEqual(v);
                        case "gt"   : return Promotion.DESCRIPTION.greaterThan(v);
                        case "ge"   : return Promotion.DESCRIPTION.greaterOrEqual(v);
                        case "like" : return Promotion.DESCRIPTION.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Promotion.description."
                        );
                    }
                }
                case "startDate" : {
                    final Date v = Date.valueOf(value());
                    switch (operator()) {
                        case "eq"   : return Promotion.START_DATE.equal(v);
                        case "ne"   : return Promotion.START_DATE.notEqual(v);
                        case "lt"   : return Promotion.START_DATE.lessThan(v);
                        case "le"   : return Promotion.START_DATE.lessOrEqual(v);
                        case "gt"   : return Promotion.START_DATE.greaterThan(v);
                        case "ge"   : return Promotion.START_DATE.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Promotion.startDate."
                        );
                    }
                }
                case "endDate" : {
                    final Date v = Date.valueOf(value());
                    switch (operator()) {
                        case "eq"   : return Promotion.END_DATE.equal(v);
                        case "ne"   : return Promotion.END_DATE.notEqual(v);
                        case "lt"   : return Promotion.END_DATE.lessThan(v);
                        case "le"   : return Promotion.END_DATE.lessOrEqual(v);
                        case "gt"   : return Promotion.END_DATE.greaterThan(v);
                        case "ge"   : return Promotion.END_DATE.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Promotion.endDate."
                        );
                    }
                }
                case "showId" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Promotion.SHOW_ID.equal(v);
                        case "ne"   : return Promotion.SHOW_ID.notEqual(v);
                        case "lt"   : return Promotion.SHOW_ID.lessThan(v);
                        case "le"   : return Promotion.SHOW_ID.lessOrEqual(v);
                        case "gt"   : return Promotion.SHOW_ID.greaterThan(v);
                        case "ge"   : return Promotion.SHOW_ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Promotion.showId."
                        );
                    }
                }
                case "moveId" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Promotion.MOVE_ID.equal(v);
                        case "ne"   : return Promotion.MOVE_ID.notEqual(v);
                        case "lt"   : return Promotion.MOVE_ID.lessThan(v);
                        case "le"   : return Promotion.MOVE_ID.lessOrEqual(v);
                        case "gt"   : return Promotion.MOVE_ID.greaterThan(v);
                        case "ge"   : return Promotion.MOVE_ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Promotion.moveId."
                        );
                    }
                }
                case "theatreId" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Promotion.THEATRE_ID.equal(v);
                        case "ne"   : return Promotion.THEATRE_ID.notEqual(v);
                        case "lt"   : return Promotion.THEATRE_ID.lessThan(v);
                        case "le"   : return Promotion.THEATRE_ID.lessOrEqual(v);
                        case "gt"   : return Promotion.THEATRE_ID.greaterThan(v);
                        case "ge"   : return Promotion.THEATRE_ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Promotion.theatreId."
                        );
                    }
                }
                case "customerId" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Promotion.CUSTOMER_ID.equal(v);
                        case "ne"   : return Promotion.CUSTOMER_ID.notEqual(v);
                        case "lt"   : return Promotion.CUSTOMER_ID.lessThan(v);
                        case "le"   : return Promotion.CUSTOMER_ID.lessOrEqual(v);
                        case "gt"   : return Promotion.CUSTOMER_ID.greaterThan(v);
                        case "ge"   : return Promotion.CUSTOMER_ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Promotion.customerId."
                        );
                    }
                }
                case "staffId" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Promotion.STAFF_ID.equal(v);
                        case "ne"   : return Promotion.STAFF_ID.notEqual(v);
                        case "lt"   : return Promotion.STAFF_ID.lessThan(v);
                        case "le"   : return Promotion.STAFF_ID.lessOrEqual(v);
                        case "gt"   : return Promotion.STAFF_ID.greaterThan(v);
                        case "ge"   : return Promotion.STAFF_ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Promotion.staffId."
                        );
                    }
                }
                case "price" : {
                    final Double v = Double.parseDouble(value());
                    switch (operator()) {
                        case "eq"   : return Promotion.PRICE.equal(v);
                        case "ne"   : return Promotion.PRICE.notEqual(v);
                        case "lt"   : return Promotion.PRICE.lessThan(v);
                        case "le"   : return Promotion.PRICE.lessOrEqual(v);
                        case "gt"   : return Promotion.PRICE.greaterThan(v);
                        case "ge"   : return Promotion.PRICE.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Promotion.price."
                        );
                    }
                }
                case "picture" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Promotion.PICTURE.equal(v);
                        case "ne"   : return Promotion.PICTURE.notEqual(v);
                        case "lt"   : return Promotion.PICTURE.lessThan(v);
                        case "le"   : return Promotion.PICTURE.lessOrEqual(v);
                        case "gt"   : return Promotion.PICTURE.greaterThan(v);
                        case "ge"   : return Promotion.PICTURE.greaterOrEqual(v);
                        case "like" : return Promotion.PICTURE.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Promotion.picture."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Promotion property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public static final class PromotionSort extends AbstractSort<Promotion> {
        
        public PromotionSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<Promotion> toComparator() {
            final Comparator<Promotion> comparator;
            switch (property()) {
                case "id"          : comparator = Promotion.ID.comparator();          break;
                case "code"        : comparator = Promotion.CODE.comparator();        break;
                case "name"        : comparator = Promotion.NAME.comparator();        break;
                case "discount"    : comparator = Promotion.DISCOUNT.comparator();    break;
                case "description" : comparator = Promotion.DESCRIPTION.comparator(); break;
                case "startDate"   : comparator = Promotion.START_DATE.comparator();  break;
                case "endDate"     : comparator = Promotion.END_DATE.comparator();    break;
                case "showId"      : comparator = Promotion.SHOW_ID.comparator();     break;
                case "moveId"      : comparator = Promotion.MOVE_ID.comparator();     break;
                case "theatreId"   : comparator = Promotion.THEATRE_ID.comparator();  break;
                case "customerId"  : comparator = Promotion.CUSTOMER_ID.comparator(); break;
                case "staffId"     : comparator = Promotion.STAFF_ID.comparator();    break;
                case "price"       : comparator = Promotion.PRICE.comparator();       break;
                case "picture"     : comparator = Promotion.PICTURE.comparator();     break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Promotion property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class CreateBody {
        
        private final String code;
        private final String name;
        private final Double discount;
        private final String description;
        private final Date startDate;
        private final Date endDate;
        private final Integer showId;
        private final Integer moveId;
        private final Integer theatreId;
        private final Integer customerId;
        private final Integer staffId;
        private final Double price;
        private final String picture;
        
        @JsonCreator
        public CreateBody(
                @JsonProperty("code") String code,
                @JsonProperty("name") String name,
                @JsonProperty("discount") Double discount,
                @JsonProperty("description") String description,
                @JsonProperty("startDate") Date startDate,
                @JsonProperty("endDate") Date endDate,
                @JsonProperty("showId") Integer showId,
                @JsonProperty("moveId") Integer moveId,
                @JsonProperty("theatreId") Integer theatreId,
                @JsonProperty("customerId") Integer customerId,
                @JsonProperty("staffId") Integer staffId,
                @JsonProperty("price") Double price,
                @JsonProperty("picture") String picture) {
            this.code = Objects.requireNonNull(code, "`code` is required");
            this.name = Objects.requireNonNull(name, "`name` is required");
            this.discount = Objects.requireNonNull(discount, "`discount` is required");
            this.description = Objects.requireNonNull(description, "`description` is required");
            this.startDate = Objects.requireNonNull(startDate, "`startDate` is required");
            this.endDate = Objects.requireNonNull(endDate, "`endDate` is required");
            this.showId = Objects.requireNonNull(showId, "`showId` is required");
            this.moveId = Objects.requireNonNull(moveId, "`moveId` is required");
            this.theatreId = Objects.requireNonNull(theatreId, "`theatreId` is required");
            this.customerId = Objects.requireNonNull(customerId, "`customerId` is required");
            this.staffId = Objects.requireNonNull(staffId, "`staffId` is required");
            this.price = Objects.requireNonNull(price, "`price` is required");
            this.picture = Objects.requireNonNull(picture, "`picture` is required");
        }
        
        public String getCode() {
            return this.code;
        }
        
        public String getName() {
            return this.name;
        }
        
        public Double getDiscount() {
            return this.discount;
        }
        
        public String getDescription() {
            return this.description;
        }
        
        public Date getStartDate() {
            return this.startDate;
        }
        
        public Date getEndDate() {
            return this.endDate;
        }
        
        public Integer getShowId() {
            return this.showId;
        }
        
        public Integer getMoveId() {
            return this.moveId;
        }
        
        public Integer getTheatreId() {
            return this.theatreId;
        }
        
        public Integer getCustomerId() {
            return this.customerId;
        }
        
        public Integer getStaffId() {
            return this.staffId;
        }
        
        public Double getPrice() {
            return this.price;
        }
        
        public String getPicture() {
            return this.picture;
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class UpdateBody {
        
        private final String code;
        private final String name;
        private final Double discount;
        private final String description;
        private final Date startDate;
        private final Date endDate;
        private final Integer showId;
        private final Integer moveId;
        private final Integer theatreId;
        private final Integer customerId;
        private final Integer staffId;
        private final Double price;
        private final String picture;
        
        @JsonCreator
        public UpdateBody(
                @JsonProperty("code") String code,
                @JsonProperty("name") String name,
                @JsonProperty("discount") Double discount,
                @JsonProperty("description") String description,
                @JsonProperty("startDate") Date startDate,
                @JsonProperty("endDate") Date endDate,
                @JsonProperty("showId") Integer showId,
                @JsonProperty("moveId") Integer moveId,
                @JsonProperty("theatreId") Integer theatreId,
                @JsonProperty("customerId") Integer customerId,
                @JsonProperty("staffId") Integer staffId,
                @JsonProperty("price") Double price,
                @JsonProperty("picture") String picture) {
            this.code = Objects.requireNonNull(code, "`code` is required");
            this.name = Objects.requireNonNull(name, "`name` is required");
            this.discount = Objects.requireNonNull(discount, "`discount` is required");
            this.description = Objects.requireNonNull(description, "`description` is required");
            this.startDate = Objects.requireNonNull(startDate, "`startDate` is required");
            this.endDate = Objects.requireNonNull(endDate, "`endDate` is required");
            this.showId = Objects.requireNonNull(showId, "`showId` is required");
            this.moveId = Objects.requireNonNull(moveId, "`moveId` is required");
            this.theatreId = Objects.requireNonNull(theatreId, "`theatreId` is required");
            this.customerId = Objects.requireNonNull(customerId, "`customerId` is required");
            this.staffId = Objects.requireNonNull(staffId, "`staffId` is required");
            this.price = Objects.requireNonNull(price, "`price` is required");
            this.picture = Objects.requireNonNull(picture, "`picture` is required");
        }
        
        public String getCode() {
            return this.code;
        }
        
        public String getName() {
            return this.name;
        }
        
        public Double getDiscount() {
            return this.discount;
        }
        
        public String getDescription() {
            return this.description;
        }
        
        public Date getStartDate() {
            return this.startDate;
        }
        
        public Date getEndDate() {
            return this.endDate;
        }
        
        public Integer getShowId() {
            return this.showId;
        }
        
        public Integer getMoveId() {
            return this.moveId;
        }
        
        public Integer getTheatreId() {
            return this.theatreId;
        }
        
        public Integer getCustomerId() {
            return this.customerId;
        }
        
        public Integer getStaffId() {
            return this.staffId;
        }
        
        public Double getPrice() {
            return this.price;
        }
        
        public String getPicture() {
            return this.picture;
        }
    }
}