package com.example.demo.c04cinema.c04cinema.c04cinema.seat.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.hall.Hall;
import com.example.demo.c04cinema.c04cinema.c04cinema.seat.Seat;
import com.example.demo.c04cinema.c04cinema.c04cinema.seat_type.SeatType;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.seat.Seat}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedSeatImpl implements Seat {
    
    private int id;
    private String name;
    private Integer hallId;
    private Integer seatTypeId;
    
    protected GeneratedSeatImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public Optional<String> getName() {
        return Optional.ofNullable(name);
    }
    
    @Override
    public OptionalInt getHallId() {
        return OptionalUtil.ofNullable(hallId);
    }
    
    @Override
    public OptionalInt getSeatTypeId() {
        return OptionalUtil.ofNullable(seatTypeId);
    }
    
    @Override
    public Seat setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Seat setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public Seat setHallId(Integer hallId) {
        this.hallId = hallId;
        return this;
    }
    
    @Override
    public Seat setSeatTypeId(Integer seatTypeId) {
        this.seatTypeId = seatTypeId;
        return this;
    }
    
    @Override
    public Optional<Hall> findHallId(Manager<Hall> foreignManager) {
        if (getHallId().isPresent()) {
            return foreignManager.stream().filter(Hall.ID.equal(getHallId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<SeatType> findSeatTypeId(Manager<SeatType> foreignManager) {
        if (getSeatTypeId().isPresent()) {
            return foreignManager.stream().filter(SeatType.ID.equal(getSeatTypeId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "         + Objects.toString(getId()));
        sj.add("name = "       + Objects.toString(OptionalUtil.unwrap(getName())));
        sj.add("hallId = "     + Objects.toString(OptionalUtil.unwrap(getHallId())));
        sj.add("seatTypeId = " + Objects.toString(OptionalUtil.unwrap(getSeatTypeId())));
        return "SeatImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Seat)) { return false; }
        final Seat thatSeat = (Seat)that;
        if (this.getId() != thatSeat.getId()) { return false; }
        if (!Objects.equals(this.getName(), thatSeat.getName())) { return false; }
        if (!Objects.equals(this.getHallId(), thatSeat.getHallId())) { return false; }
        if (!Objects.equals(this.getSeatTypeId(), thatSeat.getSeatTypeId())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getName()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getHallId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getSeatTypeId()));
        return hash;
    }
}