package com.example.demo.c04cinema.c04cinema.c04cinema.promotion_customer.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.promotion_customer.PromotionCustomer;
import com.example.demo.c04cinema.c04cinema.c04cinema.promotion_customer.PromotionCustomerManager;
import com.example.demo.c04cinema.c04cinema.c04cinema.promotion_customer.generated.GeneratedPromotionCustomer.Identifier;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.json.Json;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.field.Field;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;

import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for PromotionCustomer entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
public abstract class GeneratedPromotionCustomerController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired PromotionCustomerManager manager;
    protected JsonEncoder<PromotionCustomer> encoder;
    
    @PostConstruct
    void createPromotionCustomerEncoder() {
        encoder = jsonComponent.<PromotionCustomer>emptyEncoder()
            .put("id", PromotionCustomer.ID)
            .put("promotionId", PromotionCustomer.PROMOTION_ID)
            .put("customerId", PromotionCustomer.CUSTOMER_ID)
            .put("promotionCode", PromotionCustomer.PROMOTION_CODE)
            .build();
    }
    
    @GetMapping(path = "/promotion_customer", produces = "application/json")
    public String get(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return getHelper(
            ControllerUtil.parseFilters(filters, PromotionCustomerFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, PromotionCustomerSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    @ResponseStatus(code = HttpStatus.CREATED)
    @PostMapping(path = "/promotion_customer", consumes = "application/json")
    public void create(
            @RequestBody @Validated CreateBody createBody) {
        manager.persist(manager.create()
            .setPromotionId(createBody.getPromotionId())
            .setCustomerId(createBody.getCustomerId())
            .setPromotionCode(createBody.getPromotionCode())
        );
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @PatchMapping(path = "/promotion_customer/{id}", consumes = "application/json")
    public void update(
            @PathVariable(name = "id") int id,
            @RequestBody @Validated UpdateBody updateBody) {
        manager.stream()
            .filter(PromotionCustomer.ID.equal(id))
            .map(promotionCustomer -> {
                promotionCustomer.setPromotionId(updateBody.getPromotionId());
                promotionCustomer.setCustomerId(updateBody.getCustomerId());
                promotionCustomer.setPromotionCode(updateBody.getPromotionCode());
                return promotionCustomer;
        }).forEach(manager.updater());
    }
    
    @ResponseStatus(code = HttpStatus.NO_CONTENT)
    @DeleteMapping(path = "/promotion_customer/{id}")
    public void delete(
            @PathVariable(name = "id") int id) {
        manager.stream()
            .filter(PromotionCustomer.ID.equal(id))
            .forEach(manager.remover());
    }
    
    @ExceptionHandler(JsonMappingException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleMissingValueError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: missing required fields");
        
        return Json.toJson(error, true);
    }
    
    @ExceptionHandler(JsonParseException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleInvalidJsonError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: invalid JSON syntax");
        
        return Json.toJson(error, true);
    }
    
    protected final Set<Identifier> parseColumns(String jsonColumnList) {
        try {
            @SuppressWarnings("unchecked")
            final List<String> parsed = (List<String>) Json.fromJson(jsonColumnList);
            final Set<GeneratedPromotionCustomer.Identifier> result = EnumSet.noneOf(GeneratedPromotionCustomer.Identifier.class);
            parsed.stream().map(this::parseColumn).forEach(result::add);
            return result;
        } catch (final ClassCastException ex) {
            throw new IllegalArgumentException("Error in parsed JSON.");
        }
    }
    
    protected final Identifier parseColumn(String jsonColumn) {
        switch (jsonColumn) {
            case "id":            return GeneratedPromotionCustomer.Identifier.ID;
            case "promotionId":   return GeneratedPromotionCustomer.Identifier.PROMOTION_ID;
            case "customerId":    return GeneratedPromotionCustomer.Identifier.CUSTOMER_ID;
            case "promotionCode": return GeneratedPromotionCustomer.Identifier.PROMOTION_CODE;
            default: throw new IllegalArgumentException(
                "Unknown column '" + jsonColumn + "'."
            );
        }
    }
    
    protected final Field<PromotionCustomer> fieldOf(Identifier columnId) {
        switch (columnId) {
            case ID:             return PromotionCustomer.ID;
            case PROMOTION_ID:   return PromotionCustomer.PROMOTION_ID;
            case CUSTOMER_ID:    return PromotionCustomer.CUSTOMER_ID;
            case PROMOTION_CODE: return PromotionCustomer.PROMOTION_CODE;
            default: throw new IllegalArgumentException(
                "Unknown column '" + columnId + "'."
            );
        }
    }
    
    protected String getHelper(
            List<Predicate<PromotionCustomer>> predicates,
            List<Comparator<PromotionCustomer>> sorters,
            long start,
            long limit) {
        Stream<PromotionCustomer> stream = manager.stream();
        
        for (final Predicate<PromotionCustomer> predicate : predicates) {
            stream = stream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<PromotionCustomer>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        return stream
            .skip(start)
            .limit(limit)
            .collect(JsonCollectors.toList(encoder));
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public static final class PromotionCustomerFilter extends AbstractFilter<PromotionCustomer> {
        
        public PromotionCustomerFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<PromotionCustomer> toPredicate() {
            switch (property()) {
                case "id" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return PromotionCustomer.ID.equal(v);
                        case "ne"   : return PromotionCustomer.ID.notEqual(v);
                        case "lt"   : return PromotionCustomer.ID.lessThan(v);
                        case "le"   : return PromotionCustomer.ID.lessOrEqual(v);
                        case "gt"   : return PromotionCustomer.ID.greaterThan(v);
                        case "ge"   : return PromotionCustomer.ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "PromotionCustomer.id."
                        );
                    }
                }
                case "promotionId" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return PromotionCustomer.PROMOTION_ID.equal(v);
                        case "ne"   : return PromotionCustomer.PROMOTION_ID.notEqual(v);
                        case "lt"   : return PromotionCustomer.PROMOTION_ID.lessThan(v);
                        case "le"   : return PromotionCustomer.PROMOTION_ID.lessOrEqual(v);
                        case "gt"   : return PromotionCustomer.PROMOTION_ID.greaterThan(v);
                        case "ge"   : return PromotionCustomer.PROMOTION_ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "PromotionCustomer.promotionId."
                        );
                    }
                }
                case "customerId" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return PromotionCustomer.CUSTOMER_ID.equal(v);
                        case "ne"   : return PromotionCustomer.CUSTOMER_ID.notEqual(v);
                        case "lt"   : return PromotionCustomer.CUSTOMER_ID.lessThan(v);
                        case "le"   : return PromotionCustomer.CUSTOMER_ID.lessOrEqual(v);
                        case "gt"   : return PromotionCustomer.CUSTOMER_ID.greaterThan(v);
                        case "ge"   : return PromotionCustomer.CUSTOMER_ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "PromotionCustomer.customerId."
                        );
                    }
                }
                case "promotionCode" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return PromotionCustomer.PROMOTION_CODE.equal(v);
                        case "ne"   : return PromotionCustomer.PROMOTION_CODE.notEqual(v);
                        case "lt"   : return PromotionCustomer.PROMOTION_CODE.lessThan(v);
                        case "le"   : return PromotionCustomer.PROMOTION_CODE.lessOrEqual(v);
                        case "gt"   : return PromotionCustomer.PROMOTION_CODE.greaterThan(v);
                        case "ge"   : return PromotionCustomer.PROMOTION_CODE.greaterOrEqual(v);
                        case "like" : return PromotionCustomer.PROMOTION_CODE.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "PromotionCustomer.promotionCode."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid PromotionCustomer property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public static final class PromotionCustomerSort extends AbstractSort<PromotionCustomer> {
        
        public PromotionCustomerSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<PromotionCustomer> toComparator() {
            final Comparator<PromotionCustomer> comparator;
            switch (property()) {
                case "id"            : comparator = PromotionCustomer.ID.comparator();             break;
                case "promotionId"   : comparator = PromotionCustomer.PROMOTION_ID.comparator();   break;
                case "customerId"    : comparator = PromotionCustomer.CUSTOMER_ID.comparator();    break;
                case "promotionCode" : comparator = PromotionCustomer.PROMOTION_CODE.comparator(); break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid PromotionCustomer property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class CreateBody {
        
        private final Integer promotionId;
        private final Integer customerId;
        private final String promotionCode;
        
        @JsonCreator
        public CreateBody(
                @JsonProperty("promotionId") Integer promotionId,
                @JsonProperty("customerId") Integer customerId,
                @JsonProperty("promotionCode") String promotionCode) {
            this.promotionId = Objects.requireNonNull(promotionId, "`promotionId` is required");
            this.customerId = Objects.requireNonNull(customerId, "`customerId` is required");
            this.promotionCode = Objects.requireNonNull(promotionCode, "`promotionCode` is required");
        }
        
        public Integer getPromotionId() {
            return this.promotionId;
        }
        
        public Integer getCustomerId() {
            return this.customerId;
        }
        
        public String getPromotionCode() {
            return this.promotionCode;
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class UpdateBody {
        
        private final Integer promotionId;
        private final Integer customerId;
        private final String promotionCode;
        
        @JsonCreator
        public UpdateBody(
                @JsonProperty("promotionId") Integer promotionId,
                @JsonProperty("customerId") Integer customerId,
                @JsonProperty("promotionCode") String promotionCode) {
            this.promotionId = Objects.requireNonNull(promotionId, "`promotionId` is required");
            this.customerId = Objects.requireNonNull(customerId, "`customerId` is required");
            this.promotionCode = Objects.requireNonNull(promotionCode, "`promotionCode` is required");
        }
        
        public Integer getPromotionId() {
            return this.promotionId;
        }
        
        public Integer getCustomerId() {
            return this.customerId;
        }
        
        public String getPromotionCode() {
            return this.promotionCode;
        }
    }
}