package com.example.demo.c04cinema.c04cinema.c04cinema.movie.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.movie.Movie;
import com.example.demo.c04cinema.c04cinema.c04cinema.movie_rated_age.MovieRatedAge;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Date;
import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.movie.Movie}-interface
 * representing entities of the {@code movie}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedMovie {
    
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getId()} method.
     */
    IntField<Movie, Integer> ID = IntField.create(
        Identifier.ID,
        Movie::getId,
        Movie::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getName()} method.
     */
    StringField<Movie, String> NAME = StringField.create(
        Identifier.NAME,
        o -> OptionalUtil.unwrap(o.getName()),
        Movie::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getDirector()} method.
     */
    StringField<Movie, String> DIRECTOR = StringField.create(
        Identifier.DIRECTOR,
        o -> OptionalUtil.unwrap(o.getDirector()),
        Movie::setDirector,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getActor()} method.
     */
    StringField<Movie, String> ACTOR = StringField.create(
        Identifier.ACTOR,
        o -> OptionalUtil.unwrap(o.getActor()),
        Movie::setActor,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getIsSub()} method.
     */
    ComparableField<Movie, Byte, Byte> IS_SUB = ComparableField.create(
        Identifier.IS_SUB,
        o -> OptionalUtil.unwrap(o.getIsSub()),
        Movie::setIsSub,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getIs2d()} method.
     */
    ComparableField<Movie, Byte, Byte> IS2D = ComparableField.create(
        Identifier.IS2D,
        o -> OptionalUtil.unwrap(o.getIs2d()),
        Movie::setIs2d,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getPosterUrl()} method.
     */
    StringField<Movie, String> POSTER_URL = StringField.create(
        Identifier.POSTER_URL,
        o -> OptionalUtil.unwrap(o.getPosterUrl()),
        Movie::setPosterUrl,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getStartDate()} method.
     */
    ComparableField<Movie, Date, Date> START_DATE = ComparableField.create(
        Identifier.START_DATE,
        o -> OptionalUtil.unwrap(o.getStartDate()),
        Movie::setStartDate,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getEndDate()} method.
     */
    ComparableField<Movie, Date, Date> END_DATE = ComparableField.create(
        Identifier.END_DATE,
        o -> OptionalUtil.unwrap(o.getEndDate()),
        Movie::setEndDate,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getDuration()} method.
     */
    ComparableField<Movie, Integer, Integer> DURATION = ComparableField.create(
        Identifier.DURATION,
        o -> OptionalUtil.unwrap(o.getDuration()),
        Movie::setDuration,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getTrailerUrl()} method.
     */
    StringField<Movie, String> TRAILER_URL = StringField.create(
        Identifier.TRAILER_URL,
        o -> OptionalUtil.unwrap(o.getTrailerUrl()),
        Movie::setTrailerUrl,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getStarRating()} method.
     */
    ComparableField<Movie, Integer, Integer> STAR_RATING = ComparableField.create(
        Identifier.STAR_RATING,
        o -> OptionalUtil.unwrap(o.getStarRating()),
        Movie::setStarRating,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getMovieRatedAgeId()} method.
     */
    ComparableForeignKeyField<Movie, Integer, Integer, MovieRatedAge> MOVIE_RATED_AGE_ID = ComparableForeignKeyField.create(
        Identifier.MOVIE_RATED_AGE_ID,
        o -> OptionalUtil.unwrap(o.getMovieRatedAgeId()),
        Movie::setMovieRatedAgeId,
        MovieRatedAge.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getDescription()} method.
     */
    StringField<Movie, String> DESCRIPTION = StringField.create(
        Identifier.DESCRIPTION,
        o -> OptionalUtil.unwrap(o.getDescription()),
        Movie::setDescription,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getEntertainment()} method.
     */
    StringField<Movie, String> ENTERTAINMENT = StringField.create(
        Identifier.ENTERTAINMENT,
        o -> OptionalUtil.unwrap(o.getEntertainment()),
        Movie::setEntertainment,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Movie. The id field corresponds to the database
     * column c04cinema.c04cinema.movie.id.
     * 
     * @return the id of this Movie
     */
    int getId();
    
    /**
     * Returns the name of this Movie. The name field corresponds to the
     * database column c04cinema.c04cinema.movie.name.
     * 
     * @return the name of this Movie
     */
    Optional<String> getName();
    
    /**
     * Returns the director of this Movie. The director field corresponds to the
     * database column c04cinema.c04cinema.movie.director.
     * 
     * @return the director of this Movie
     */
    Optional<String> getDirector();
    
    /**
     * Returns the actor of this Movie. The actor field corresponds to the
     * database column c04cinema.c04cinema.movie.actor.
     * 
     * @return the actor of this Movie
     */
    Optional<String> getActor();
    
    /**
     * Returns the isSub of this Movie. The isSub field corresponds to the
     * database column c04cinema.c04cinema.movie.is_sub.
     * 
     * @return the isSub of this Movie
     */
    Optional<Byte> getIsSub();
    
    /**
     * Returns the is2d of this Movie. The is2d field corresponds to the
     * database column c04cinema.c04cinema.movie.is_2d.
     * 
     * @return the is2d of this Movie
     */
    Optional<Byte> getIs2d();
    
    /**
     * Returns the posterUrl of this Movie. The posterUrl field corresponds to
     * the database column c04cinema.c04cinema.movie.poster_url.
     * 
     * @return the posterUrl of this Movie
     */
    Optional<String> getPosterUrl();
    
    /**
     * Returns the startDate of this Movie. The startDate field corresponds to
     * the database column c04cinema.c04cinema.movie.start_date.
     * 
     * @return the startDate of this Movie
     */
    Optional<Date> getStartDate();
    
    /**
     * Returns the endDate of this Movie. The endDate field corresponds to the
     * database column c04cinema.c04cinema.movie.end_date.
     * 
     * @return the endDate of this Movie
     */
    Optional<Date> getEndDate();
    
    /**
     * Returns the duration of this Movie. The duration field corresponds to the
     * database column c04cinema.c04cinema.movie.duration.
     * 
     * @return the duration of this Movie
     */
    OptionalInt getDuration();
    
    /**
     * Returns the trailerUrl of this Movie. The trailerUrl field corresponds to
     * the database column c04cinema.c04cinema.movie.trailer_url.
     * 
     * @return the trailerUrl of this Movie
     */
    Optional<String> getTrailerUrl();
    
    /**
     * Returns the starRating of this Movie. The starRating field corresponds to
     * the database column c04cinema.c04cinema.movie.star_rating.
     * 
     * @return the starRating of this Movie
     */
    OptionalInt getStarRating();
    
    /**
     * Returns the movieRatedAgeId of this Movie. The movieRatedAgeId field
     * corresponds to the database column
     * c04cinema.c04cinema.movie.movie_rated_age_id.
     * 
     * @return the movieRatedAgeId of this Movie
     */
    OptionalInt getMovieRatedAgeId();
    
    /**
     * Returns the description of this Movie. The description field corresponds
     * to the database column c04cinema.c04cinema.movie.description.
     * 
     * @return the description of this Movie
     */
    Optional<String> getDescription();
    
    /**
     * Returns the entertainment of this Movie. The entertainment field
     * corresponds to the database column
     * c04cinema.c04cinema.movie.entertainment.
     * 
     * @return the entertainment of this Movie
     */
    Optional<String> getEntertainment();
    
    /**
     * Sets the id of this Movie. The id field corresponds to the database
     * column c04cinema.c04cinema.movie.id.
     * 
     * @param id to set of this Movie
     * @return   this Movie instance
     */
    Movie setId(int id);
    
    /**
     * Sets the name of this Movie. The name field corresponds to the database
     * column c04cinema.c04cinema.movie.name.
     * 
     * @param name to set of this Movie
     * @return     this Movie instance
     */
    Movie setName(String name);
    
    /**
     * Sets the director of this Movie. The director field corresponds to the
     * database column c04cinema.c04cinema.movie.director.
     * 
     * @param director to set of this Movie
     * @return         this Movie instance
     */
    Movie setDirector(String director);
    
    /**
     * Sets the actor of this Movie. The actor field corresponds to the database
     * column c04cinema.c04cinema.movie.actor.
     * 
     * @param actor to set of this Movie
     * @return      this Movie instance
     */
    Movie setActor(String actor);
    
    /**
     * Sets the isSub of this Movie. The isSub field corresponds to the database
     * column c04cinema.c04cinema.movie.is_sub.
     * 
     * @param isSub to set of this Movie
     * @return      this Movie instance
     */
    Movie setIsSub(Byte isSub);
    
    /**
     * Sets the is2d of this Movie. The is2d field corresponds to the database
     * column c04cinema.c04cinema.movie.is_2d.
     * 
     * @param is2d to set of this Movie
     * @return     this Movie instance
     */
    Movie setIs2d(Byte is2d);
    
    /**
     * Sets the posterUrl of this Movie. The posterUrl field corresponds to the
     * database column c04cinema.c04cinema.movie.poster_url.
     * 
     * @param posterUrl to set of this Movie
     * @return          this Movie instance
     */
    Movie setPosterUrl(String posterUrl);
    
    /**
     * Sets the startDate of this Movie. The startDate field corresponds to the
     * database column c04cinema.c04cinema.movie.start_date.
     * 
     * @param startDate to set of this Movie
     * @return          this Movie instance
     */
    Movie setStartDate(Date startDate);
    
    /**
     * Sets the endDate of this Movie. The endDate field corresponds to the
     * database column c04cinema.c04cinema.movie.end_date.
     * 
     * @param endDate to set of this Movie
     * @return        this Movie instance
     */
    Movie setEndDate(Date endDate);
    
    /**
     * Sets the duration of this Movie. The duration field corresponds to the
     * database column c04cinema.c04cinema.movie.duration.
     * 
     * @param duration to set of this Movie
     * @return         this Movie instance
     */
    Movie setDuration(Integer duration);
    
    /**
     * Sets the trailerUrl of this Movie. The trailerUrl field corresponds to
     * the database column c04cinema.c04cinema.movie.trailer_url.
     * 
     * @param trailerUrl to set of this Movie
     * @return           this Movie instance
     */
    Movie setTrailerUrl(String trailerUrl);
    
    /**
     * Sets the starRating of this Movie. The starRating field corresponds to
     * the database column c04cinema.c04cinema.movie.star_rating.
     * 
     * @param starRating to set of this Movie
     * @return           this Movie instance
     */
    Movie setStarRating(Integer starRating);
    
    /**
     * Sets the movieRatedAgeId of this Movie. The movieRatedAgeId field
     * corresponds to the database column
     * c04cinema.c04cinema.movie.movie_rated_age_id.
     * 
     * @param movieRatedAgeId to set of this Movie
     * @return                this Movie instance
     */
    Movie setMovieRatedAgeId(Integer movieRatedAgeId);
    
    /**
     * Sets the description of this Movie. The description field corresponds to
     * the database column c04cinema.c04cinema.movie.description.
     * 
     * @param description to set of this Movie
     * @return            this Movie instance
     */
    Movie setDescription(String description);
    
    /**
     * Sets the entertainment of this Movie. The entertainment field corresponds
     * to the database column c04cinema.c04cinema.movie.entertainment.
     * 
     * @param entertainment to set of this Movie
     * @return              this Movie instance
     */
    Movie setEntertainment(String entertainment);
    
    /**
     * Queries the specified manager for the referenced MovieRatedAge. If no
     * such MovieRatedAge exists, an {@code NullPointerException} will be
     * thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<MovieRatedAge> findMovieRatedAgeId(Manager<MovieRatedAge> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Movie> {
        
        ID                 ("id"),
        NAME               ("name"),
        DIRECTOR           ("director"),
        ACTOR              ("actor"),
        IS_SUB             ("is_sub"),
        IS2D               ("is_2d"),
        POSTER_URL         ("poster_url"),
        START_DATE         ("start_date"),
        END_DATE           ("end_date"),
        DURATION           ("duration"),
        TRAILER_URL        ("trailer_url"),
        STAR_RATING        ("star_rating"),
        MOVIE_RATED_AGE_ID ("movie_rated_age_id"),
        DESCRIPTION        ("description"),
        ENTERTAINMENT      ("entertainment");
        
        private final String columnId;
        private final TableIdentifier<Movie> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "c04cinema";
        }
        
        @Override
        public String getSchemaId() {
            return "c04cinema";
        }
        
        @Override
        public String getTableId() {
            return "movie";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Movie> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}