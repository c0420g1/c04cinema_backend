package com.example.demo.c04cinema.c04cinema.c04cinema.movie.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.movie.Movie;
import com.example.demo.c04cinema.c04cinema.c04cinema.movie_rated_age.MovieRatedAge;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.sql.Date;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.movie.Movie}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMovieImpl implements Movie {
    
    private int id;
    private String name;
    private String director;
    private String actor;
    private Byte isSub;
    private Byte is2d;
    private String posterUrl;
    private Date startDate;
    private Date endDate;
    private Integer duration;
    private String trailerUrl;
    private Integer starRating;
    private Integer movieRatedAgeId;
    private String description;
    private String entertainment;
    
    protected GeneratedMovieImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public Optional<String> getName() {
        return Optional.ofNullable(name);
    }
    
    @Override
    public Optional<String> getDirector() {
        return Optional.ofNullable(director);
    }
    
    @Override
    public Optional<String> getActor() {
        return Optional.ofNullable(actor);
    }
    
    @Override
    public Optional<Byte> getIsSub() {
        return Optional.ofNullable(isSub);
    }
    
    @Override
    public Optional<Byte> getIs2d() {
        return Optional.ofNullable(is2d);
    }
    
    @Override
    public Optional<String> getPosterUrl() {
        return Optional.ofNullable(posterUrl);
    }
    
    @Override
    public Optional<Date> getStartDate() {
        return Optional.ofNullable(startDate);
    }
    
    @Override
    public Optional<Date> getEndDate() {
        return Optional.ofNullable(endDate);
    }
    
    @Override
    public OptionalInt getDuration() {
        return OptionalUtil.ofNullable(duration);
    }
    
    @Override
    public Optional<String> getTrailerUrl() {
        return Optional.ofNullable(trailerUrl);
    }
    
    @Override
    public OptionalInt getStarRating() {
        return OptionalUtil.ofNullable(starRating);
    }
    
    @Override
    public OptionalInt getMovieRatedAgeId() {
        return OptionalUtil.ofNullable(movieRatedAgeId);
    }
    
    @Override
    public Optional<String> getDescription() {
        return Optional.ofNullable(description);
    }
    
    @Override
    public Optional<String> getEntertainment() {
        return Optional.ofNullable(entertainment);
    }
    
    @Override
    public Movie setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Movie setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public Movie setDirector(String director) {
        this.director = director;
        return this;
    }
    
    @Override
    public Movie setActor(String actor) {
        this.actor = actor;
        return this;
    }
    
    @Override
    public Movie setIsSub(Byte isSub) {
        this.isSub = isSub;
        return this;
    }
    
    @Override
    public Movie setIs2d(Byte is2d) {
        this.is2d = is2d;
        return this;
    }
    
    @Override
    public Movie setPosterUrl(String posterUrl) {
        this.posterUrl = posterUrl;
        return this;
    }
    
    @Override
    public Movie setStartDate(Date startDate) {
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public Movie setEndDate(Date endDate) {
        this.endDate = endDate;
        return this;
    }
    
    @Override
    public Movie setDuration(Integer duration) {
        this.duration = duration;
        return this;
    }
    
    @Override
    public Movie setTrailerUrl(String trailerUrl) {
        this.trailerUrl = trailerUrl;
        return this;
    }
    
    @Override
    public Movie setStarRating(Integer starRating) {
        this.starRating = starRating;
        return this;
    }
    
    @Override
    public Movie setMovieRatedAgeId(Integer movieRatedAgeId) {
        this.movieRatedAgeId = movieRatedAgeId;
        return this;
    }
    
    @Override
    public Movie setDescription(String description) {
        this.description = description;
        return this;
    }
    
    @Override
    public Movie setEntertainment(String entertainment) {
        this.entertainment = entertainment;
        return this;
    }
    
    @Override
    public Optional<MovieRatedAge> findMovieRatedAgeId(Manager<MovieRatedAge> foreignManager) {
        if (getMovieRatedAgeId().isPresent()) {
            return foreignManager.stream().filter(MovieRatedAge.ID.equal(getMovieRatedAgeId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "              + Objects.toString(getId()));
        sj.add("name = "            + Objects.toString(OptionalUtil.unwrap(getName())));
        sj.add("director = "        + Objects.toString(OptionalUtil.unwrap(getDirector())));
        sj.add("actor = "           + Objects.toString(OptionalUtil.unwrap(getActor())));
        sj.add("isSub = "           + Objects.toString(OptionalUtil.unwrap(getIsSub())));
        sj.add("is2d = "            + Objects.toString(OptionalUtil.unwrap(getIs2d())));
        sj.add("posterUrl = "       + Objects.toString(OptionalUtil.unwrap(getPosterUrl())));
        sj.add("startDate = "       + Objects.toString(OptionalUtil.unwrap(getStartDate())));
        sj.add("endDate = "         + Objects.toString(OptionalUtil.unwrap(getEndDate())));
        sj.add("duration = "        + Objects.toString(OptionalUtil.unwrap(getDuration())));
        sj.add("trailerUrl = "      + Objects.toString(OptionalUtil.unwrap(getTrailerUrl())));
        sj.add("starRating = "      + Objects.toString(OptionalUtil.unwrap(getStarRating())));
        sj.add("movieRatedAgeId = " + Objects.toString(OptionalUtil.unwrap(getMovieRatedAgeId())));
        sj.add("description = "     + Objects.toString(OptionalUtil.unwrap(getDescription())));
        sj.add("entertainment = "   + Objects.toString(OptionalUtil.unwrap(getEntertainment())));
        return "MovieImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Movie)) { return false; }
        final Movie thatMovie = (Movie)that;
        if (this.getId() != thatMovie.getId()) { return false; }
        if (!Objects.equals(this.getName(), thatMovie.getName())) { return false; }
        if (!Objects.equals(this.getDirector(), thatMovie.getDirector())) { return false; }
        if (!Objects.equals(this.getActor(), thatMovie.getActor())) { return false; }
        if (!Objects.equals(this.getIsSub(), thatMovie.getIsSub())) { return false; }
        if (!Objects.equals(this.getIs2d(), thatMovie.getIs2d())) { return false; }
        if (!Objects.equals(this.getPosterUrl(), thatMovie.getPosterUrl())) { return false; }
        if (!Objects.equals(this.getStartDate(), thatMovie.getStartDate())) { return false; }
        if (!Objects.equals(this.getEndDate(), thatMovie.getEndDate())) { return false; }
        if (!Objects.equals(this.getDuration(), thatMovie.getDuration())) { return false; }
        if (!Objects.equals(this.getTrailerUrl(), thatMovie.getTrailerUrl())) { return false; }
        if (!Objects.equals(this.getStarRating(), thatMovie.getStarRating())) { return false; }
        if (!Objects.equals(this.getMovieRatedAgeId(), thatMovie.getMovieRatedAgeId())) { return false; }
        if (!Objects.equals(this.getDescription(), thatMovie.getDescription())) { return false; }
        if (!Objects.equals(this.getEntertainment(), thatMovie.getEntertainment())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getName()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getDirector()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getActor()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getIsSub()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getIs2d()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPosterUrl()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getStartDate()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getEndDate()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getDuration()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getTrailerUrl()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getStarRating()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getMovieRatedAgeId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getDescription()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getEntertainment()));
        return hash;
    }
}