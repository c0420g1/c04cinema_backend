package com.example.demo.c04cinema.c04cinema.c04cinema.movie.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.movie.Movie;
import com.example.demo.c04cinema.c04cinema.c04cinema.movie.MovieImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.util.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.movie.Movie} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMovieSqlAdapter implements SqlAdapter<Movie> {
    
    private final TableIdentifier<Movie> tableIdentifier;
    
    protected GeneratedMovieSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("c04cinema", "c04cinema", "movie");
    }
    
    protected Movie apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(              resultSet.getInt(1 + offset))
            .setName(            resultSet.getString(2 + offset))
            .setDirector(        resultSet.getString(3 + offset))
            .setActor(           resultSet.getString(4 + offset))
            .setIsSub(           getByte(resultSet, 5 + offset))
            .setIs2d(            getByte(resultSet, 6 + offset))
            .setPosterUrl(       resultSet.getString(7 + offset))
            .setStartDate(       resultSet.getDate(8 + offset))
            .setEndDate(         resultSet.getDate(9 + offset))
            .setDuration(        getInt(resultSet, 10 + offset))
            .setTrailerUrl(      resultSet.getString(11 + offset))
            .setStarRating(      getInt(resultSet, 12 + offset))
            .setMovieRatedAgeId( getInt(resultSet, 13 + offset))
            .setDescription(     resultSet.getString(14 + offset))
            .setEntertainment(   resultSet.getString(15 + offset))
            ;
    }
    
    protected MovieImpl createEntity() {
        return new MovieImpl();
    }
    
    @Override
    public TableIdentifier<Movie> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Movie> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Movie> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}