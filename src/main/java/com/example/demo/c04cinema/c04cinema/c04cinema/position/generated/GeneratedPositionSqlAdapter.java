package com.example.demo.c04cinema.c04cinema.c04cinema.position.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.position.Position;
import com.example.demo.c04cinema.c04cinema.c04cinema.position.PositionImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.position.Position} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedPositionSqlAdapter implements SqlAdapter<Position> {
    
    private final TableIdentifier<Position> tableIdentifier;
    
    protected GeneratedPositionSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("c04cinema", "c04cinema", "position");
    }
    
    protected Position apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(          resultSet.getInt(1 + offset))
            .setName(        resultSet.getString(2 + offset))
            .setDescription( resultSet.getString(3 + offset))
            ;
    }
    
    protected PositionImpl createEntity() {
        return new PositionImpl();
    }
    
    @Override
    public TableIdentifier<Position> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Position> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Position> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}