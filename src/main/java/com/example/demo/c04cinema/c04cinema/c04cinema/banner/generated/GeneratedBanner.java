package com.example.demo.c04cinema.c04cinema.c04cinema.banner.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.banner.Banner;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;

/**
 * The generated base for the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.banner.Banner}-interface
 * representing entities of the {@code banner}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedBanner {
    
    /**
     * This Field corresponds to the {@link Banner} field that can be obtained
     * using the {@link Banner#getId()} method.
     */
    IntField<Banner, Integer> ID = IntField.create(
        Identifier.ID,
        Banner::getId,
        Banner::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Banner} field that can be obtained
     * using the {@link Banner#getTitle()} method.
     */
    StringField<Banner, String> TITLE = StringField.create(
        Identifier.TITLE,
        o -> OptionalUtil.unwrap(o.getTitle()),
        Banner::setTitle,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Banner} field that can be obtained
     * using the {@link Banner#getUrl()} method.
     */
    StringField<Banner, String> URL = StringField.create(
        Identifier.URL,
        o -> OptionalUtil.unwrap(o.getUrl()),
        Banner::setUrl,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Banner} field that can be obtained
     * using the {@link Banner#getDescription()} method.
     */
    StringField<Banner, String> DESCRIPTION = StringField.create(
        Identifier.DESCRIPTION,
        o -> OptionalUtil.unwrap(o.getDescription()),
        Banner::setDescription,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Banner. The id field corresponds to the database
     * column c04cinema.c04cinema.banner.id.
     * 
     * @return the id of this Banner
     */
    int getId();
    
    /**
     * Returns the title of this Banner. The title field corresponds to the
     * database column c04cinema.c04cinema.banner.title.
     * 
     * @return the title of this Banner
     */
    Optional<String> getTitle();
    
    /**
     * Returns the url of this Banner. The url field corresponds to the database
     * column c04cinema.c04cinema.banner.url.
     * 
     * @return the url of this Banner
     */
    Optional<String> getUrl();
    
    /**
     * Returns the description of this Banner. The description field corresponds
     * to the database column c04cinema.c04cinema.banner.description.
     * 
     * @return the description of this Banner
     */
    Optional<String> getDescription();
    
    /**
     * Sets the id of this Banner. The id field corresponds to the database
     * column c04cinema.c04cinema.banner.id.
     * 
     * @param id to set of this Banner
     * @return   this Banner instance
     */
    Banner setId(int id);
    
    /**
     * Sets the title of this Banner. The title field corresponds to the
     * database column c04cinema.c04cinema.banner.title.
     * 
     * @param title to set of this Banner
     * @return      this Banner instance
     */
    Banner setTitle(String title);
    
    /**
     * Sets the url of this Banner. The url field corresponds to the database
     * column c04cinema.c04cinema.banner.url.
     * 
     * @param url to set of this Banner
     * @return    this Banner instance
     */
    Banner setUrl(String url);
    
    /**
     * Sets the description of this Banner. The description field corresponds to
     * the database column c04cinema.c04cinema.banner.description.
     * 
     * @param description to set of this Banner
     * @return            this Banner instance
     */
    Banner setDescription(String description);
    
    enum Identifier implements ColumnIdentifier<Banner> {
        
        ID          ("id"),
        TITLE       ("title"),
        URL         ("url"),
        DESCRIPTION ("description");
        
        private final String columnId;
        private final TableIdentifier<Banner> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "c04cinema";
        }
        
        @Override
        public String getSchemaId() {
            return "c04cinema";
        }
        
        @Override
        public String getTableId() {
            return "banner";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Banner> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}