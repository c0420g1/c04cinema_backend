package com.example.demo.c04cinema.c04cinema.c04cinema.booking_ticket.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.account.Account;
import com.example.demo.c04cinema.c04cinema.c04cinema.booking_ticket.BookingTicket;
import com.example.demo.c04cinema.c04cinema.c04cinema.payment.Payment;
import com.example.demo.c04cinema.c04cinema.c04cinema.promotion.Promotion;
import com.example.demo.c04cinema.c04cinema.c04cinema.seat.Seat;
import com.example.demo.c04cinema.c04cinema.c04cinema.show.Show;
import com.example.demo.c04cinema.c04cinema.c04cinema.ticket_type.TicketType;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import com.speedment.runtime.typemapper.time.TimestampToLocalDateTimeMapper;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.booking_ticket.BookingTicket}-interface
 * representing entities of the {@code booking_ticket}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedBookingTicket {
    
    /**
     * This Field corresponds to the {@link BookingTicket} field that can be
     * obtained using the {@link BookingTicket#getId()} method.
     */
    IntField<BookingTicket, Integer> ID = IntField.create(
        Identifier.ID,
        BookingTicket::getId,
        BookingTicket::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link BookingTicket} field that can be
     * obtained using the {@link BookingTicket#getCode()} method.
     */
    StringField<BookingTicket, String> CODE = StringField.create(
        Identifier.CODE,
        o -> OptionalUtil.unwrap(o.getCode()),
        BookingTicket::setCode,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link BookingTicket} field that can be
     * obtained using the {@link BookingTicket#getShowId()} method.
     */
    ComparableForeignKeyField<BookingTicket, Integer, Integer, Show> SHOW_ID = ComparableForeignKeyField.create(
        Identifier.SHOW_ID,
        o -> OptionalUtil.unwrap(o.getShowId()),
        BookingTicket::setShowId,
        Show.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link BookingTicket} field that can be
     * obtained using the {@link BookingTicket#getTicketTypeId()} method.
     */
    ComparableForeignKeyField<BookingTicket, Integer, Integer, TicketType> TICKET_TYPE_ID = ComparableForeignKeyField.create(
        Identifier.TICKET_TYPE_ID,
        o -> OptionalUtil.unwrap(o.getTicketTypeId()),
        BookingTicket::setTicketTypeId,
        TicketType.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link BookingTicket} field that can be
     * obtained using the {@link BookingTicket#getSeatId()} method.
     */
    ComparableForeignKeyField<BookingTicket, Integer, Integer, Seat> SEAT_ID = ComparableForeignKeyField.create(
        Identifier.SEAT_ID,
        o -> OptionalUtil.unwrap(o.getSeatId()),
        BookingTicket::setSeatId,
        Seat.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link BookingTicket} field that can be
     * obtained using the {@link BookingTicket#getPromotionId()} method.
     */
    ComparableForeignKeyField<BookingTicket, Integer, Integer, Promotion> PROMOTION_ID = ComparableForeignKeyField.create(
        Identifier.PROMOTION_ID,
        o -> OptionalUtil.unwrap(o.getPromotionId()),
        BookingTicket::setPromotionId,
        Promotion.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link BookingTicket} field that can be
     * obtained using the {@link BookingTicket#getAccountId()} method.
     */
    ComparableForeignKeyField<BookingTicket, Integer, Integer, Account> ACCOUNT_ID = ComparableForeignKeyField.create(
        Identifier.ACCOUNT_ID,
        o -> OptionalUtil.unwrap(o.getAccountId()),
        BookingTicket::setAccountId,
        Account.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link BookingTicket} field that can be
     * obtained using the {@link BookingTicket#getPaymentId()} method.
     */
    ComparableForeignKeyField<BookingTicket, Integer, Integer, Payment> PAYMENT_ID = ComparableForeignKeyField.create(
        Identifier.PAYMENT_ID,
        o -> OptionalUtil.unwrap(o.getPaymentId()),
        BookingTicket::setPaymentId,
        Payment.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link BookingTicket} field that can be
     * obtained using the {@link BookingTicket#getContactEmail()} method.
     */
    StringField<BookingTicket, String> CONTACT_EMAIL = StringField.create(
        Identifier.CONTACT_EMAIL,
        o -> OptionalUtil.unwrap(o.getContactEmail()),
        BookingTicket::setContactEmail,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link BookingTicket} field that can be
     * obtained using the {@link BookingTicket#getContactPhone()} method.
     */
    StringField<BookingTicket, String> CONTACT_PHONE = StringField.create(
        Identifier.CONTACT_PHONE,
        o -> OptionalUtil.unwrap(o.getContactPhone()),
        BookingTicket::setContactPhone,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link BookingTicket} field that can be
     * obtained using the {@link BookingTicket#getStatus()} method.
     */
    ComparableField<BookingTicket, Byte, Byte> STATUS = ComparableField.create(
        Identifier.STATUS,
        o -> OptionalUtil.unwrap(o.getStatus()),
        BookingTicket::setStatus,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link BookingTicket} field that can be
     * obtained using the {@link BookingTicket#getPrice()} method.
     */
    ComparableField<BookingTicket, Double, Double> PRICE = ComparableField.create(
        Identifier.PRICE,
        o -> OptionalUtil.unwrap(o.getPrice()),
        BookingTicket::setPrice,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link BookingTicket} field that can be
     * obtained using the {@link BookingTicket#getIscancel()} method.
     */
    ComparableField<BookingTicket, Byte, Byte> ISCANCEL = ComparableField.create(
        Identifier.ISCANCEL,
        o -> OptionalUtil.unwrap(o.getIscancel()),
        BookingTicket::setIscancel,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link BookingTicket} field that can be
     * obtained using the {@link BookingTicket#getBookingDate()} method.
     */
    ComparableField<BookingTicket, Timestamp, LocalDateTime> BOOKING_DATE = ComparableField.create(
        Identifier.BOOKING_DATE,
        o -> OptionalUtil.unwrap(o.getBookingDate()),
        BookingTicket::setBookingDate,
        new TimestampToLocalDateTimeMapper(),
        false
    );
    
    /**
     * Returns the id of this BookingTicket. The id field corresponds to the
     * database column c04cinema.c04cinema.booking_ticket.id.
     * 
     * @return the id of this BookingTicket
     */
    int getId();
    
    /**
     * Returns the code of this BookingTicket. The code field corresponds to the
     * database column c04cinema.c04cinema.booking_ticket.code.
     * 
     * @return the code of this BookingTicket
     */
    Optional<String> getCode();
    
    /**
     * Returns the showId of this BookingTicket. The showId field corresponds to
     * the database column c04cinema.c04cinema.booking_ticket.show_id.
     * 
     * @return the showId of this BookingTicket
     */
    OptionalInt getShowId();
    
    /**
     * Returns the ticketTypeId of this BookingTicket. The ticketTypeId field
     * corresponds to the database column
     * c04cinema.c04cinema.booking_ticket.ticket_type_id.
     * 
     * @return the ticketTypeId of this BookingTicket
     */
    OptionalInt getTicketTypeId();
    
    /**
     * Returns the seatId of this BookingTicket. The seatId field corresponds to
     * the database column c04cinema.c04cinema.booking_ticket.seat_id.
     * 
     * @return the seatId of this BookingTicket
     */
    OptionalInt getSeatId();
    
    /**
     * Returns the promotionId of this BookingTicket. The promotionId field
     * corresponds to the database column
     * c04cinema.c04cinema.booking_ticket.promotion_id.
     * 
     * @return the promotionId of this BookingTicket
     */
    OptionalInt getPromotionId();
    
    /**
     * Returns the accountId of this BookingTicket. The accountId field
     * corresponds to the database column
     * c04cinema.c04cinema.booking_ticket.account_id.
     * 
     * @return the accountId of this BookingTicket
     */
    OptionalInt getAccountId();
    
    /**
     * Returns the paymentId of this BookingTicket. The paymentId field
     * corresponds to the database column
     * c04cinema.c04cinema.booking_ticket.payment_id.
     * 
     * @return the paymentId of this BookingTicket
     */
    OptionalInt getPaymentId();
    
    /**
     * Returns the contactEmail of this BookingTicket. The contactEmail field
     * corresponds to the database column
     * c04cinema.c04cinema.booking_ticket.contact_email.
     * 
     * @return the contactEmail of this BookingTicket
     */
    Optional<String> getContactEmail();
    
    /**
     * Returns the contactPhone of this BookingTicket. The contactPhone field
     * corresponds to the database column
     * c04cinema.c04cinema.booking_ticket.contact_phone.
     * 
     * @return the contactPhone of this BookingTicket
     */
    Optional<String> getContactPhone();
    
    /**
     * Returns the status of this BookingTicket. The status field corresponds to
     * the database column c04cinema.c04cinema.booking_ticket.status.
     * 
     * @return the status of this BookingTicket
     */
    Optional<Byte> getStatus();
    
    /**
     * Returns the price of this BookingTicket. The price field corresponds to
     * the database column c04cinema.c04cinema.booking_ticket.price.
     * 
     * @return the price of this BookingTicket
     */
    OptionalDouble getPrice();
    
    /**
     * Returns the iscancel of this BookingTicket. The iscancel field
     * corresponds to the database column
     * c04cinema.c04cinema.booking_ticket.iscancel.
     * 
     * @return the iscancel of this BookingTicket
     */
    Optional<Byte> getIscancel();
    
    /**
     * Returns the bookingDate of this BookingTicket. The bookingDate field
     * corresponds to the database column
     * c04cinema.c04cinema.booking_ticket.booking_date.
     * 
     * @return the bookingDate of this BookingTicket
     */
    Optional<LocalDateTime> getBookingDate();
    
    /**
     * Sets the id of this BookingTicket. The id field corresponds to the
     * database column c04cinema.c04cinema.booking_ticket.id.
     * 
     * @param id to set of this BookingTicket
     * @return   this BookingTicket instance
     */
    BookingTicket setId(int id);
    
    /**
     * Sets the code of this BookingTicket. The code field corresponds to the
     * database column c04cinema.c04cinema.booking_ticket.code.
     * 
     * @param code to set of this BookingTicket
     * @return     this BookingTicket instance
     */
    BookingTicket setCode(String code);
    
    /**
     * Sets the showId of this BookingTicket. The showId field corresponds to
     * the database column c04cinema.c04cinema.booking_ticket.show_id.
     * 
     * @param showId to set of this BookingTicket
     * @return       this BookingTicket instance
     */
    BookingTicket setShowId(Integer showId);
    
    /**
     * Sets the ticketTypeId of this BookingTicket. The ticketTypeId field
     * corresponds to the database column
     * c04cinema.c04cinema.booking_ticket.ticket_type_id.
     * 
     * @param ticketTypeId to set of this BookingTicket
     * @return             this BookingTicket instance
     */
    BookingTicket setTicketTypeId(Integer ticketTypeId);
    
    /**
     * Sets the seatId of this BookingTicket. The seatId field corresponds to
     * the database column c04cinema.c04cinema.booking_ticket.seat_id.
     * 
     * @param seatId to set of this BookingTicket
     * @return       this BookingTicket instance
     */
    BookingTicket setSeatId(Integer seatId);
    
    /**
     * Sets the promotionId of this BookingTicket. The promotionId field
     * corresponds to the database column
     * c04cinema.c04cinema.booking_ticket.promotion_id.
     * 
     * @param promotionId to set of this BookingTicket
     * @return            this BookingTicket instance
     */
    BookingTicket setPromotionId(Integer promotionId);
    
    /**
     * Sets the accountId of this BookingTicket. The accountId field corresponds
     * to the database column c04cinema.c04cinema.booking_ticket.account_id.
     * 
     * @param accountId to set of this BookingTicket
     * @return          this BookingTicket instance
     */
    BookingTicket setAccountId(Integer accountId);
    
    /**
     * Sets the paymentId of this BookingTicket. The paymentId field corresponds
     * to the database column c04cinema.c04cinema.booking_ticket.payment_id.
     * 
     * @param paymentId to set of this BookingTicket
     * @return          this BookingTicket instance
     */
    BookingTicket setPaymentId(Integer paymentId);
    
    /**
     * Sets the contactEmail of this BookingTicket. The contactEmail field
     * corresponds to the database column
     * c04cinema.c04cinema.booking_ticket.contact_email.
     * 
     * @param contactEmail to set of this BookingTicket
     * @return             this BookingTicket instance
     */
    BookingTicket setContactEmail(String contactEmail);
    
    /**
     * Sets the contactPhone of this BookingTicket. The contactPhone field
     * corresponds to the database column
     * c04cinema.c04cinema.booking_ticket.contact_phone.
     * 
     * @param contactPhone to set of this BookingTicket
     * @return             this BookingTicket instance
     */
    BookingTicket setContactPhone(String contactPhone);
    
    /**
     * Sets the status of this BookingTicket. The status field corresponds to
     * the database column c04cinema.c04cinema.booking_ticket.status.
     * 
     * @param status to set of this BookingTicket
     * @return       this BookingTicket instance
     */
    BookingTicket setStatus(Byte status);
    
    /**
     * Sets the price of this BookingTicket. The price field corresponds to the
     * database column c04cinema.c04cinema.booking_ticket.price.
     * 
     * @param price to set of this BookingTicket
     * @return      this BookingTicket instance
     */
    BookingTicket setPrice(Double price);
    
    /**
     * Sets the iscancel of this BookingTicket. The iscancel field corresponds
     * to the database column c04cinema.c04cinema.booking_ticket.iscancel.
     * 
     * @param iscancel to set of this BookingTicket
     * @return         this BookingTicket instance
     */
    BookingTicket setIscancel(Byte iscancel);
    
    /**
     * Sets the bookingDate of this BookingTicket. The bookingDate field
     * corresponds to the database column
     * c04cinema.c04cinema.booking_ticket.booking_date.
     * 
     * @param bookingDate to set of this BookingTicket
     * @return            this BookingTicket instance
     */
    BookingTicket setBookingDate(LocalDateTime bookingDate);
    
    /**
     * Queries the specified manager for the referenced Show. If no such Show
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Show> findShowId(Manager<Show> foreignManager);
    
    /**
     * Queries the specified manager for the referenced TicketType. If no such
     * TicketType exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<TicketType> findTicketTypeId(Manager<TicketType> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Seat. If no such Seat
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Seat> findSeatId(Manager<Seat> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Promotion. If no such
     * Promotion exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Promotion> findPromotionId(Manager<Promotion> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Account. If no such
     * Account exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Account> findAccountId(Manager<Account> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Payment. If no such
     * Payment exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Payment> findPaymentId(Manager<Payment> foreignManager);
    
    enum Identifier implements ColumnIdentifier<BookingTicket> {
        
        ID             ("id"),
        CODE           ("code"),
        SHOW_ID        ("show_id"),
        TICKET_TYPE_ID ("ticket_type_id"),
        SEAT_ID        ("seat_id"),
        PROMOTION_ID   ("promotion_id"),
        ACCOUNT_ID     ("account_id"),
        PAYMENT_ID     ("payment_id"),
        CONTACT_EMAIL  ("contact_email"),
        CONTACT_PHONE  ("contact_phone"),
        STATUS         ("status"),
        PRICE          ("price"),
        ISCANCEL       ("iscancel"),
        BOOKING_DATE   ("booking_date");
        
        private final String columnId;
        private final TableIdentifier<BookingTicket> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "c04cinema";
        }
        
        @Override
        public String getSchemaId() {
            return "c04cinema";
        }
        
        @Override
        public String getTableId() {
            return "booking_ticket";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<BookingTicket> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}