package com.example.demo.c04cinema.c04cinema.c04cinema.banner.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.banner.Banner;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.banner.Banner}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedBannerImpl implements Banner {
    
    private int id;
    private String title;
    private String url;
    private String description;
    private String type;
    private Byte isOther;
    
    protected GeneratedBannerImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public Optional<String> getTitle() {
        return Optional.ofNullable(title);
    }
    
    @Override
    public Optional<String> getUrl() {
        return Optional.ofNullable(url);
    }
    
    @Override
    public Optional<String> getDescription() {
        return Optional.ofNullable(description);
    }
    
    @Override
    public Optional<String> getType() {
        return Optional.ofNullable(type);
    }
    
    @Override
    public Optional<Byte> getIsOther() {
        return Optional.ofNullable(isOther);
    }
    
    @Override
    public Banner setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Banner setTitle(String title) {
        this.title = title;
        return this;
    }
    
    @Override
    public Banner setUrl(String url) {
        this.url = url;
        return this;
    }
    
    @Override
    public Banner setDescription(String description) {
        this.description = description;
        return this;
    }
    
    @Override
    public Banner setType(String type) {
        this.type = type;
        return this;
    }
    
    @Override
    public Banner setIsOther(Byte isOther) {
        this.isOther = isOther;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "          + Objects.toString(getId()));
        sj.add("title = "       + Objects.toString(OptionalUtil.unwrap(getTitle())));
        sj.add("url = "         + Objects.toString(OptionalUtil.unwrap(getUrl())));
        sj.add("description = " + Objects.toString(OptionalUtil.unwrap(getDescription())));
        sj.add("type = "        + Objects.toString(OptionalUtil.unwrap(getType())));
        sj.add("isOther = "     + Objects.toString(OptionalUtil.unwrap(getIsOther())));
        return "BannerImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Banner)) { return false; }
        final Banner thatBanner = (Banner)that;
        if (this.getId() != thatBanner.getId()) { return false; }
        if (!Objects.equals(this.getTitle(), thatBanner.getTitle())) { return false; }
        if (!Objects.equals(this.getUrl(), thatBanner.getUrl())) { return false; }
        if (!Objects.equals(this.getDescription(), thatBanner.getDescription())) { return false; }
        if (!Objects.equals(this.getType(), thatBanner.getType())) { return false; }
        if (!Objects.equals(this.getIsOther(), thatBanner.getIsOther())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getTitle()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getUrl()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getDescription()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getType()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getIsOther()));
        return hash;
    }
}