package com.example.demo.c04cinema.c04cinema.c04cinema.comment.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.comment.Comment;
import com.example.demo.c04cinema.c04cinema.c04cinema.customer.Customer;
import com.example.demo.c04cinema.c04cinema.c04cinema.movie.Movie;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.comment.Comment}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedCommentImpl implements Comment {
    
    private int id;
    private Integer customerId;
    private Integer movieId;
    private String comment;
    private Timestamp createDate;
    private Integer replyOneCustomId;
    private Integer like;
    private String emotion;
    private Integer replyTwoCustomId;
    
    protected GeneratedCommentImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public OptionalInt getCustomerId() {
        return OptionalUtil.ofNullable(customerId);
    }
    
    @Override
    public OptionalInt getMovieId() {
        return OptionalUtil.ofNullable(movieId);
    }
    
    @Override
    public Optional<String> getComment() {
        return Optional.ofNullable(comment);
    }
    
    @Override
    public Optional<Timestamp> getCreateDate() {
        return Optional.ofNullable(createDate);
    }
    
    @Override
    public OptionalInt getReplyOneCustomId() {
        return OptionalUtil.ofNullable(replyOneCustomId);
    }
    
    @Override
    public OptionalInt getLike() {
        return OptionalUtil.ofNullable(like);
    }
    
    @Override
    public Optional<String> getEmotion() {
        return Optional.ofNullable(emotion);
    }
    
    @Override
    public OptionalInt getReplyTwoCustomId() {
        return OptionalUtil.ofNullable(replyTwoCustomId);
    }
    
    @Override
    public Comment setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Comment setCustomerId(Integer customerId) {
        this.customerId = customerId;
        return this;
    }
    
    @Override
    public Comment setMovieId(Integer movieId) {
        this.movieId = movieId;
        return this;
    }
    
    @Override
    public Comment setComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    @Override
    public Comment setCreateDate(Timestamp createDate) {
        this.createDate = createDate;
        return this;
    }
    
    @Override
    public Comment setReplyOneCustomId(Integer replyOneCustomId) {
        this.replyOneCustomId = replyOneCustomId;
        return this;
    }
    
    @Override
    public Comment setLike(Integer like) {
        this.like = like;
        return this;
    }
    
    @Override
    public Comment setEmotion(String emotion) {
        this.emotion = emotion;
        return this;
    }
    
    @Override
    public Comment setReplyTwoCustomId(Integer replyTwoCustomId) {
        this.replyTwoCustomId = replyTwoCustomId;
        return this;
    }
    
    @Override
    public Optional<Customer> findCustomerId(Manager<Customer> foreignManager) {
        if (getCustomerId().isPresent()) {
            return foreignManager.stream().filter(Customer.ID.equal(getCustomerId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<Movie> findMovieId(Manager<Movie> foreignManager) {
        if (getMovieId().isPresent()) {
            return foreignManager.stream().filter(Movie.ID.equal(getMovieId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "               + Objects.toString(getId()));
        sj.add("customerId = "       + Objects.toString(OptionalUtil.unwrap(getCustomerId())));
        sj.add("movieId = "          + Objects.toString(OptionalUtil.unwrap(getMovieId())));
        sj.add("comment = "          + Objects.toString(OptionalUtil.unwrap(getComment())));
        sj.add("createDate = "       + Objects.toString(OptionalUtil.unwrap(getCreateDate())));
        sj.add("replyOneCustomId = " + Objects.toString(OptionalUtil.unwrap(getReplyOneCustomId())));
        sj.add("like = "             + Objects.toString(OptionalUtil.unwrap(getLike())));
        sj.add("emotion = "          + Objects.toString(OptionalUtil.unwrap(getEmotion())));
        sj.add("replyTwoCustomId = " + Objects.toString(OptionalUtil.unwrap(getReplyTwoCustomId())));
        return "CommentImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Comment)) { return false; }
        final Comment thatComment = (Comment)that;
        if (this.getId() != thatComment.getId()) { return false; }
        if (!Objects.equals(this.getCustomerId(), thatComment.getCustomerId())) { return false; }
        if (!Objects.equals(this.getMovieId(), thatComment.getMovieId())) { return false; }
        if (!Objects.equals(this.getComment(), thatComment.getComment())) { return false; }
        if (!Objects.equals(this.getCreateDate(), thatComment.getCreateDate())) { return false; }
        if (!Objects.equals(this.getReplyOneCustomId(), thatComment.getReplyOneCustomId())) { return false; }
        if (!Objects.equals(this.getLike(), thatComment.getLike())) { return false; }
        if (!Objects.equals(this.getEmotion(), thatComment.getEmotion())) { return false; }
        if (!Objects.equals(this.getReplyTwoCustomId(), thatComment.getReplyTwoCustomId())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getCustomerId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getMovieId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getComment()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getCreateDate()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getReplyOneCustomId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getLike()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getEmotion()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getReplyTwoCustomId()));
        return hash;
    }
}