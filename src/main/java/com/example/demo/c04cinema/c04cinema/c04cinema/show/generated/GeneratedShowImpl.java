package com.example.demo.c04cinema.c04cinema.c04cinema.show.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.hall.Hall;
import com.example.demo.c04cinema.c04cinema.c04cinema.movie.Movie;
import com.example.demo.c04cinema.c04cinema.c04cinema.show.Show;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.time.LocalDateTime;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.show.Show}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedShowImpl implements Show {
    
    private int id;
    private LocalDateTime startTime;
    private int hallId;
    private Integer movieId;
    private Double price;
    private String description;
    private Byte isearly;
    
    protected GeneratedShowImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public Optional<LocalDateTime> getStartTime() {
        return Optional.ofNullable(startTime);
    }
    
    @Override
    public int getHallId() {
        return hallId;
    }
    
    @Override
    public OptionalInt getMovieId() {
        return OptionalUtil.ofNullable(movieId);
    }
    
    @Override
    public OptionalDouble getPrice() {
        return OptionalUtil.ofNullable(price);
    }
    
    @Override
    public Optional<String> getDescription() {
        return Optional.ofNullable(description);
    }
    
    @Override
    public Optional<Byte> getIsearly() {
        return Optional.ofNullable(isearly);
    }
    
    @Override
    public Show setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Show setStartTime(LocalDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    @Override
    public Show setHallId(int hallId) {
        this.hallId = hallId;
        return this;
    }
    
    @Override
    public Show setMovieId(Integer movieId) {
        this.movieId = movieId;
        return this;
    }
    
    @Override
    public Show setPrice(Double price) {
        this.price = price;
        return this;
    }
    
    @Override
    public Show setDescription(String description) {
        this.description = description;
        return this;
    }
    
    @Override
    public Show setIsearly(Byte isearly) {
        this.isearly = isearly;
        return this;
    }
    
    @Override
    public Hall findHallId(Manager<Hall> foreignManager) {
        return foreignManager.stream().filter(Hall.ID.equal(getHallId())).findAny().orElse(null);
    }
    
    @Override
    public Optional<Movie> findMovieId(Manager<Movie> foreignManager) {
        if (getMovieId().isPresent()) {
            return foreignManager.stream().filter(Movie.ID.equal(getMovieId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "          + Objects.toString(getId()));
        sj.add("startTime = "   + Objects.toString(OptionalUtil.unwrap(getStartTime())));
        sj.add("hallId = "      + Objects.toString(getHallId()));
        sj.add("movieId = "     + Objects.toString(OptionalUtil.unwrap(getMovieId())));
        sj.add("price = "       + Objects.toString(OptionalUtil.unwrap(getPrice())));
        sj.add("description = " + Objects.toString(OptionalUtil.unwrap(getDescription())));
        sj.add("isearly = "     + Objects.toString(OptionalUtil.unwrap(getIsearly())));
        return "ShowImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Show)) { return false; }
        final Show thatShow = (Show)that;
        if (this.getId() != thatShow.getId()) { return false; }
        if (!Objects.equals(this.getStartTime(), thatShow.getStartTime())) { return false; }
        if (this.getHallId() != thatShow.getHallId()) { return false; }
        if (!Objects.equals(this.getMovieId(), thatShow.getMovieId())) { return false; }
        if (!Objects.equals(this.getPrice(), thatShow.getPrice())) { return false; }
        if (!Objects.equals(this.getDescription(), thatShow.getDescription())) { return false; }
        if (!Objects.equals(this.getIsearly(), thatShow.getIsearly())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getStartTime()));
        hash = 31 * hash + Integer.hashCode(getHallId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getMovieId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPrice()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getDescription()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getIsearly()));
        return hash;
    }
}