package com.example.demo.c04cinema.c04cinema.c04cinema.customer_type.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.customer_type.CustomerType;
import com.example.demo.c04cinema.c04cinema.c04cinema.customer_type.CustomerTypeImpl;
import com.example.demo.c04cinema.c04cinema.c04cinema.customer_type.CustomerTypeManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.AbstractManager;
import com.speedment.runtime.field.Field;

import java.util.stream.Stream;

/**
 * The generated base implementation for the manager of every {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.customer_type.CustomerType}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedCustomerTypeManagerImpl 
extends AbstractManager<CustomerType> 
implements GeneratedCustomerTypeManager {
    
    private final TableIdentifier<CustomerType> tableIdentifier;
    
    protected GeneratedCustomerTypeManagerImpl() {
        this.tableIdentifier = TableIdentifier.of("c04cinema", "c04cinema", "customer_type");
    }
    
    @Override
    public CustomerType create() {
        return new CustomerTypeImpl();
    }
    
    @Override
    public TableIdentifier<CustomerType> getTableIdentifier() {
        return tableIdentifier;
    }
    
    @Override
    public Stream<Field<CustomerType>> fields() {
        return CustomerTypeManager.FIELDS.stream();
    }
    
    @Override
    public Stream<Field<CustomerType>> primaryKeyFields() {
        return Stream.of(
            CustomerType.ID
        );
    }
}