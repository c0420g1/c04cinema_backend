package com.example.demo.c04cinema.c04cinema.c04cinema.hall.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.hall.Hall;
import com.example.demo.c04cinema.c04cinema.c04cinema.hall_type.HallType;
import com.example.demo.c04cinema.c04cinema.c04cinema.theatre.Theatre;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.hall.Hall}-interface
 * representing entities of the {@code hall}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedHall {
    
    /**
     * This Field corresponds to the {@link Hall} field that can be obtained
     * using the {@link Hall#getSeatQuantity()} method.
     */
    ComparableField<Hall, Integer, Integer> SEAT_QUANTITY = ComparableField.create(
        Identifier.SEAT_QUANTITY,
        o -> OptionalUtil.unwrap(o.getSeatQuantity()),
        Hall::setSeatQuantity,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Hall} field that can be obtained
     * using the {@link Hall#getId()} method.
     */
    IntField<Hall, Integer> ID = IntField.create(
        Identifier.ID,
        Hall::getId,
        Hall::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Hall} field that can be obtained
     * using the {@link Hall#getName()} method.
     */
    StringField<Hall, String> NAME = StringField.create(
        Identifier.NAME,
        o -> OptionalUtil.unwrap(o.getName()),
        Hall::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Hall} field that can be obtained
     * using the {@link Hall#getHallTypeId()} method.
     */
    ComparableForeignKeyField<Hall, Integer, Integer, HallType> HALL_TYPE_ID = ComparableForeignKeyField.create(
        Identifier.HALL_TYPE_ID,
        o -> OptionalUtil.unwrap(o.getHallTypeId()),
        Hall::setHallTypeId,
        HallType.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Hall} field that can be obtained
     * using the {@link Hall#getTheatreId()} method.
     */
    ComparableForeignKeyField<Hall, Integer, Integer, Theatre> THEATRE_ID = ComparableForeignKeyField.create(
        Identifier.THEATRE_ID,
        o -> OptionalUtil.unwrap(o.getTheatreId()),
        Hall::setTheatreId,
        Theatre.ID,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the seatQuantity of this Hall. The seatQuantity field corresponds
     * to the database column c04cinema.c04cinema.hall.seat_quantity.
     * 
     * @return the seatQuantity of this Hall
     */
    OptionalInt getSeatQuantity();
    
    /**
     * Returns the id of this Hall. The id field corresponds to the database
     * column c04cinema.c04cinema.hall.id.
     * 
     * @return the id of this Hall
     */
    int getId();
    
    /**
     * Returns the name of this Hall. The name field corresponds to the database
     * column c04cinema.c04cinema.hall.name.
     * 
     * @return the name of this Hall
     */
    Optional<String> getName();
    
    /**
     * Returns the hallTypeId of this Hall. The hallTypeId field corresponds to
     * the database column c04cinema.c04cinema.hall.hall_type_id.
     * 
     * @return the hallTypeId of this Hall
     */
    OptionalInt getHallTypeId();
    
    /**
     * Returns the theatreId of this Hall. The theatreId field corresponds to
     * the database column c04cinema.c04cinema.hall.theatre_id.
     * 
     * @return the theatreId of this Hall
     */
    OptionalInt getTheatreId();
    
    /**
     * Sets the seatQuantity of this Hall. The seatQuantity field corresponds to
     * the database column c04cinema.c04cinema.hall.seat_quantity.
     * 
     * @param seatQuantity to set of this Hall
     * @return             this Hall instance
     */
    Hall setSeatQuantity(Integer seatQuantity);
    
    /**
     * Sets the id of this Hall. The id field corresponds to the database column
     * c04cinema.c04cinema.hall.id.
     * 
     * @param id to set of this Hall
     * @return   this Hall instance
     */
    Hall setId(int id);
    
    /**
     * Sets the name of this Hall. The name field corresponds to the database
     * column c04cinema.c04cinema.hall.name.
     * 
     * @param name to set of this Hall
     * @return     this Hall instance
     */
    Hall setName(String name);
    
    /**
     * Sets the hallTypeId of this Hall. The hallTypeId field corresponds to the
     * database column c04cinema.c04cinema.hall.hall_type_id.
     * 
     * @param hallTypeId to set of this Hall
     * @return           this Hall instance
     */
    Hall setHallTypeId(Integer hallTypeId);
    
    /**
     * Sets the theatreId of this Hall. The theatreId field corresponds to the
     * database column c04cinema.c04cinema.hall.theatre_id.
     * 
     * @param theatreId to set of this Hall
     * @return          this Hall instance
     */
    Hall setTheatreId(Integer theatreId);
    
    /**
     * Queries the specified manager for the referenced HallType. If no such
     * HallType exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<HallType> findHallTypeId(Manager<HallType> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Theatre. If no such
     * Theatre exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Theatre> findTheatreId(Manager<Theatre> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Hall> {
        
        SEAT_QUANTITY ("seat_quantity"),
        ID            ("id"),
        NAME          ("name"),
        HALL_TYPE_ID  ("hall_type_id"),
        THEATRE_ID    ("theatre_id");
        
        private final String columnId;
        private final TableIdentifier<Hall> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "c04cinema";
        }
        
        @Override
        public String getSchemaId() {
            return "c04cinema";
        }
        
        @Override
        public String getTableId() {
            return "hall";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Hall> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}