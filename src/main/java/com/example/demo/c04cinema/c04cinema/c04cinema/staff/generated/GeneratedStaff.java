package com.example.demo.c04cinema.c04cinema.c04cinema.staff.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.account.Account;
import com.example.demo.c04cinema.c04cinema.c04cinema.position.Position;
import com.example.demo.c04cinema.c04cinema.c04cinema.staff.Staff;
import com.example.demo.c04cinema.c04cinema.c04cinema.theatre.Theatre;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Timestamp;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.staff.Staff}-interface
 * representing entities of the {@code staff}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedStaff {
    
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getId()} method.
     */
    IntField<Staff, Integer> ID = IntField.create(
        Identifier.ID,
        Staff::getId,
        Staff::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getName()} method.
     */
    StringField<Staff, String> NAME = StringField.create(
        Identifier.NAME,
        o -> OptionalUtil.unwrap(o.getName()),
        Staff::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getAddress()} method.
     */
    StringField<Staff, String> ADDRESS = StringField.create(
        Identifier.ADDRESS,
        o -> OptionalUtil.unwrap(o.getAddress()),
        Staff::setAddress,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getAccountId()} method.
     */
    ComparableForeignKeyField<Staff, Integer, Integer, Account> ACCOUNT_ID = ComparableForeignKeyField.create(
        Identifier.ACCOUNT_ID,
        o -> OptionalUtil.unwrap(o.getAccountId()),
        Staff::setAccountId,
        Account.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getTheatreId()} method.
     */
    ComparableForeignKeyField<Staff, Integer, Integer, Theatre> THEATRE_ID = ComparableForeignKeyField.create(
        Identifier.THEATRE_ID,
        o -> OptionalUtil.unwrap(o.getTheatreId()),
        Staff::setTheatreId,
        Theatre.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getEmail()} method.
     */
    StringField<Staff, String> EMAIL = StringField.create(
        Identifier.EMAIL,
        o -> OptionalUtil.unwrap(o.getEmail()),
        Staff::setEmail,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getPhone()} method.
     */
    StringField<Staff, String> PHONE = StringField.create(
        Identifier.PHONE,
        o -> OptionalUtil.unwrap(o.getPhone()),
        Staff::setPhone,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getCardid()} method.
     */
    StringField<Staff, String> CARDID = StringField.create(
        Identifier.CARDID,
        o -> OptionalUtil.unwrap(o.getCardid()),
        Staff::setCardid,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getBirthday()} method.
     */
    ComparableField<Staff, Timestamp, Timestamp> BIRTHDAY = ComparableField.create(
        Identifier.BIRTHDAY,
        o -> OptionalUtil.unwrap(o.getBirthday()),
        Staff::setBirthday,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getSalary()} method.
     */
    ComparableField<Staff, Double, Double> SALARY = ComparableField.create(
        Identifier.SALARY,
        o -> OptionalUtil.unwrap(o.getSalary()),
        Staff::setSalary,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getPositionId()} method.
     */
    ComparableForeignKeyField<Staff, Integer, Integer, Position> POSITION_ID = ComparableForeignKeyField.create(
        Identifier.POSITION_ID,
        o -> OptionalUtil.unwrap(o.getPositionId()),
        Staff::setPositionId,
        Position.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getIsactive()} method.
     */
    ComparableField<Staff, Byte, Byte> ISACTIVE = ComparableField.create(
        Identifier.ISACTIVE,
        o -> OptionalUtil.unwrap(o.getIsactive()),
        Staff::setIsactive,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Staff} field that can be obtained
     * using the {@link Staff#getCode()} method.
     */
    StringField<Staff, String> CODE = StringField.create(
        Identifier.CODE,
        o -> OptionalUtil.unwrap(o.getCode()),
        Staff::setCode,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Staff. The id field corresponds to the database
     * column c04cinema.c04cinema.staff.id.
     * 
     * @return the id of this Staff
     */
    int getId();
    
    /**
     * Returns the name of this Staff. The name field corresponds to the
     * database column c04cinema.c04cinema.staff.name.
     * 
     * @return the name of this Staff
     */
    Optional<String> getName();
    
    /**
     * Returns the address of this Staff. The address field corresponds to the
     * database column c04cinema.c04cinema.staff.address.
     * 
     * @return the address of this Staff
     */
    Optional<String> getAddress();
    
    /**
     * Returns the accountId of this Staff. The accountId field corresponds to
     * the database column c04cinema.c04cinema.staff.account_id.
     * 
     * @return the accountId of this Staff
     */
    OptionalInt getAccountId();
    
    /**
     * Returns the theatreId of this Staff. The theatreId field corresponds to
     * the database column c04cinema.c04cinema.staff.theatre_id.
     * 
     * @return the theatreId of this Staff
     */
    OptionalInt getTheatreId();
    
    /**
     * Returns the email of this Staff. The email field corresponds to the
     * database column c04cinema.c04cinema.staff.email.
     * 
     * @return the email of this Staff
     */
    Optional<String> getEmail();
    
    /**
     * Returns the phone of this Staff. The phone field corresponds to the
     * database column c04cinema.c04cinema.staff.phone.
     * 
     * @return the phone of this Staff
     */
    Optional<String> getPhone();
    
    /**
     * Returns the cardid of this Staff. The cardid field corresponds to the
     * database column c04cinema.c04cinema.staff.cardid.
     * 
     * @return the cardid of this Staff
     */
    Optional<String> getCardid();
    
    /**
     * Returns the birthday of this Staff. The birthday field corresponds to the
     * database column c04cinema.c04cinema.staff.birthday.
     * 
     * @return the birthday of this Staff
     */
    Optional<Timestamp> getBirthday();
    
    /**
     * Returns the salary of this Staff. The salary field corresponds to the
     * database column c04cinema.c04cinema.staff.salary.
     * 
     * @return the salary of this Staff
     */
    OptionalDouble getSalary();
    
    /**
     * Returns the positionId of this Staff. The positionId field corresponds to
     * the database column c04cinema.c04cinema.staff.position_id.
     * 
     * @return the positionId of this Staff
     */
    OptionalInt getPositionId();
    
    /**
     * Returns the isactive of this Staff. The isactive field corresponds to the
     * database column c04cinema.c04cinema.staff.isactive.
     * 
     * @return the isactive of this Staff
     */
    Optional<Byte> getIsactive();
    
    /**
     * Returns the code of this Staff. The code field corresponds to the
     * database column c04cinema.c04cinema.staff.code.
     * 
     * @return the code of this Staff
     */
    Optional<String> getCode();
    
    /**
     * Sets the id of this Staff. The id field corresponds to the database
     * column c04cinema.c04cinema.staff.id.
     * 
     * @param id to set of this Staff
     * @return   this Staff instance
     */
    Staff setId(int id);
    
    /**
     * Sets the name of this Staff. The name field corresponds to the database
     * column c04cinema.c04cinema.staff.name.
     * 
     * @param name to set of this Staff
     * @return     this Staff instance
     */
    Staff setName(String name);
    
    /**
     * Sets the address of this Staff. The address field corresponds to the
     * database column c04cinema.c04cinema.staff.address.
     * 
     * @param address to set of this Staff
     * @return        this Staff instance
     */
    Staff setAddress(String address);
    
    /**
     * Sets the accountId of this Staff. The accountId field corresponds to the
     * database column c04cinema.c04cinema.staff.account_id.
     * 
     * @param accountId to set of this Staff
     * @return          this Staff instance
     */
    Staff setAccountId(Integer accountId);
    
    /**
     * Sets the theatreId of this Staff. The theatreId field corresponds to the
     * database column c04cinema.c04cinema.staff.theatre_id.
     * 
     * @param theatreId to set of this Staff
     * @return          this Staff instance
     */
    Staff setTheatreId(Integer theatreId);
    
    /**
     * Sets the email of this Staff. The email field corresponds to the database
     * column c04cinema.c04cinema.staff.email.
     * 
     * @param email to set of this Staff
     * @return      this Staff instance
     */
    Staff setEmail(String email);
    
    /**
     * Sets the phone of this Staff. The phone field corresponds to the database
     * column c04cinema.c04cinema.staff.phone.
     * 
     * @param phone to set of this Staff
     * @return      this Staff instance
     */
    Staff setPhone(String phone);
    
    /**
     * Sets the cardid of this Staff. The cardid field corresponds to the
     * database column c04cinema.c04cinema.staff.cardid.
     * 
     * @param cardid to set of this Staff
     * @return       this Staff instance
     */
    Staff setCardid(String cardid);
    
    /**
     * Sets the birthday of this Staff. The birthday field corresponds to the
     * database column c04cinema.c04cinema.staff.birthday.
     * 
     * @param birthday to set of this Staff
     * @return         this Staff instance
     */
    Staff setBirthday(Timestamp birthday);
    
    /**
     * Sets the salary of this Staff. The salary field corresponds to the
     * database column c04cinema.c04cinema.staff.salary.
     * 
     * @param salary to set of this Staff
     * @return       this Staff instance
     */
    Staff setSalary(Double salary);
    
    /**
     * Sets the positionId of this Staff. The positionId field corresponds to
     * the database column c04cinema.c04cinema.staff.position_id.
     * 
     * @param positionId to set of this Staff
     * @return           this Staff instance
     */
    Staff setPositionId(Integer positionId);
    
    /**
     * Sets the isactive of this Staff. The isactive field corresponds to the
     * database column c04cinema.c04cinema.staff.isactive.
     * 
     * @param isactive to set of this Staff
     * @return         this Staff instance
     */
    Staff setIsactive(Byte isactive);
    
    /**
     * Sets the code of this Staff. The code field corresponds to the database
     * column c04cinema.c04cinema.staff.code.
     * 
     * @param code to set of this Staff
     * @return     this Staff instance
     */
    Staff setCode(String code);
    
    /**
     * Queries the specified manager for the referenced Account. If no such
     * Account exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Account> findAccountId(Manager<Account> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Theatre. If no such
     * Theatre exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Theatre> findTheatreId(Manager<Theatre> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Position. If no such
     * Position exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Position> findPositionId(Manager<Position> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Staff> {
        
        ID          ("id"),
        NAME        ("name"),
        ADDRESS     ("address"),
        ACCOUNT_ID  ("account_id"),
        THEATRE_ID  ("theatre_id"),
        EMAIL       ("email"),
        PHONE       ("phone"),
        CARDID      ("cardid"),
        BIRTHDAY    ("birthday"),
        SALARY      ("salary"),
        POSITION_ID ("position_id"),
        ISACTIVE    ("isactive"),
        CODE        ("code");
        
        private final String columnId;
        private final TableIdentifier<Staff> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "c04cinema";
        }
        
        @Override
        public String getSchemaId() {
            return "c04cinema";
        }
        
        @Override
        public String getTableId() {
            return "staff";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Staff> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}