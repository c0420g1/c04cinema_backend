package com.example.demo.c04cinema.c04cinema.c04cinema.movie.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.movie.Movie;
import com.example.demo.c04cinema.c04cinema.c04cinema.movie.MovieManager;
import com.example.demo.c04cinema.c04cinema.c04cinema.movie.generated.GeneratedMovie.Identifier;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.json.Json;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.field.Field;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;

import java.sql.Date;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for Movie entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
public abstract class GeneratedMovieController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired MovieManager manager;
    protected JsonEncoder<Movie> encoder;
    
    @PostConstruct
    void createMovieEncoder() {
        encoder = jsonComponent.<Movie>emptyEncoder()
            .put("id", Movie.ID)
            .put("name", Movie.NAME)
            .put("director", Movie.DIRECTOR)
            .put("actor", Movie.ACTOR)
            .put("isSub", Movie.IS_SUB)
            .put("is2d", Movie.IS2D)
            .put("posterUrl", Movie.POSTER_URL)
            .put("startDate", Movie.START_DATE)
            .put("endDate", Movie.END_DATE)
            .put("duration", Movie.DURATION)
            .put("trailerUrl", Movie.TRAILER_URL)
            .put("starRating", Movie.STAR_RATING)
            .put("movieRatedAgeId", Movie.MOVIE_RATED_AGE_ID)
            .put("description", Movie.DESCRIPTION)
            .put("entertainment", Movie.ENTERTAINMENT)
            .build();
    }
    
    @GetMapping(path = "/movie", produces = "application/json")
    public String get(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return getHelper(
            ControllerUtil.parseFilters(filters, MovieFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, MovieSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    @ResponseStatus(code = HttpStatus.CREATED)
    @PostMapping(path = "/movie", consumes = "application/json")
    public void create(
            @RequestBody CreateBody createBody) {
        manager.persist(manager.create()
            .setName(createBody.getName())
            .setDirector(createBody.getDirector())
            .setActor(createBody.getActor())
            .setIsSub(createBody.getIsSub())
            .setIs2d(createBody.getIs2d())
            .setPosterUrl(createBody.getPosterUrl())
            .setStartDate(createBody.getStartDate())
            .setEndDate(createBody.getEndDate())
            .setDuration(createBody.getDuration())
            .setTrailerUrl(createBody.getTrailerUrl())
            .setStarRating(createBody.getStarRating())
            .setMovieRatedAgeId(createBody.getMovieRatedAgeId())
            .setDescription(createBody.getDescription())
            .setEntertainment(createBody.getEntertainment())
        );
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @PatchMapping(path = "/movie/{id}", consumes = "application/json")
    public void update(
            @PathVariable(name = "id") int id,
            @RequestBody @Validated UpdateBody updateBody) {
        manager.stream()
            .filter(Movie.ID.equal(id))
            .map(movie -> {
                movie.setName(updateBody.getName());
                movie.setDirector(updateBody.getDirector());
                movie.setActor(updateBody.getActor());
                movie.setIsSub(updateBody.getIsSub());
                movie.setIs2d(updateBody.getIs2d());
                movie.setPosterUrl(updateBody.getPosterUrl());
                movie.setStartDate(updateBody.getStartDate());
                movie.setEndDate(updateBody.getEndDate());
                movie.setDuration(updateBody.getDuration());
                movie.setTrailerUrl(updateBody.getTrailerUrl());
                movie.setStarRating(updateBody.getStarRating());
                movie.setMovieRatedAgeId(updateBody.getMovieRatedAgeId());
                movie.setDescription(updateBody.getDescription());
                movie.setEntertainment(updateBody.getEntertainment());
                return movie;
        }).forEach(manager.updater());
    }
    
    @ResponseStatus(code = HttpStatus.NO_CONTENT)
    @DeleteMapping(path = "/movie/{id}")
    public void delete(
            @PathVariable(name = "id") int id) {
        manager.stream()
            .filter(Movie.ID.equal(id))
            .forEach(manager.remover());
    }
    
    @ExceptionHandler(JsonMappingException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleMissingValueError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: missing required fields");
        
        return Json.toJson(error, true);
    }
    
    @ExceptionHandler(JsonParseException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleInvalidJsonError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: invalid JSON syntax");
        
        return Json.toJson(error, true);
    }
    
    protected final Set<Identifier> parseColumns(String jsonColumnList) {
        try {
            @SuppressWarnings("unchecked")
            final List<String> parsed = (List<String>) Json.fromJson(jsonColumnList);
            final Set<GeneratedMovie.Identifier> result = EnumSet.noneOf(GeneratedMovie.Identifier.class);
            parsed.stream().map(this::parseColumn).forEach(result::add);
            return result;
        } catch (final ClassCastException ex) {
            throw new IllegalArgumentException("Error in parsed JSON.");
        }
    }
    
    protected final Identifier parseColumn(String jsonColumn) {
        switch (jsonColumn) {
            case "id":              return GeneratedMovie.Identifier.ID;
            case "name":            return GeneratedMovie.Identifier.NAME;
            case "director":        return GeneratedMovie.Identifier.DIRECTOR;
            case "actor":           return GeneratedMovie.Identifier.ACTOR;
            case "isSub":           return GeneratedMovie.Identifier.IS_SUB;
            case "is2d":            return GeneratedMovie.Identifier.IS2D;
            case "posterUrl":       return GeneratedMovie.Identifier.POSTER_URL;
            case "startDate":       return GeneratedMovie.Identifier.START_DATE;
            case "endDate":         return GeneratedMovie.Identifier.END_DATE;
            case "duration":        return GeneratedMovie.Identifier.DURATION;
            case "trailerUrl":      return GeneratedMovie.Identifier.TRAILER_URL;
            case "starRating":      return GeneratedMovie.Identifier.STAR_RATING;
            case "movieRatedAgeId": return GeneratedMovie.Identifier.MOVIE_RATED_AGE_ID;
            case "description":     return GeneratedMovie.Identifier.DESCRIPTION;
            case "entertainment":   return GeneratedMovie.Identifier.ENTERTAINMENT;
            default: throw new IllegalArgumentException(
                "Unknown column '" + jsonColumn + "'."
            );
        }
    }
    
    protected final Field<Movie> fieldOf(Identifier columnId) {
        switch (columnId) {
            case ID:                 return Movie.ID;
            case NAME:               return Movie.NAME;
            case DIRECTOR:           return Movie.DIRECTOR;
            case ACTOR:              return Movie.ACTOR;
            case IS_SUB:             return Movie.IS_SUB;
            case IS2D:               return Movie.IS2D;
            case POSTER_URL:         return Movie.POSTER_URL;
            case START_DATE:         return Movie.START_DATE;
            case END_DATE:           return Movie.END_DATE;
            case DURATION:           return Movie.DURATION;
            case TRAILER_URL:        return Movie.TRAILER_URL;
            case STAR_RATING:        return Movie.STAR_RATING;
            case MOVIE_RATED_AGE_ID: return Movie.MOVIE_RATED_AGE_ID;
            case DESCRIPTION:        return Movie.DESCRIPTION;
            case ENTERTAINMENT:      return Movie.ENTERTAINMENT;
            default: throw new IllegalArgumentException(
                "Unknown column '" + columnId + "'."
            );
        }
    }
    
    protected String getHelper(
            List<Predicate<Movie>> predicates,
            List<Comparator<Movie>> sorters,
            long start,
            long limit) {
        Stream<Movie> stream = manager.stream();
        
        for (final Predicate<Movie> predicate : predicates) {
            stream = stream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<Movie>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        return stream
            .skip(start)
            .limit(limit)
            .collect(JsonCollectors.toList(encoder));
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public static final class MovieFilter extends AbstractFilter<Movie> {
        
        public MovieFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<Movie> toPredicate() {
            switch (property()) {
                case "id" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Movie.ID.equal(v);
                        case "ne"   : return Movie.ID.notEqual(v);
                        case "lt"   : return Movie.ID.lessThan(v);
                        case "le"   : return Movie.ID.lessOrEqual(v);
                        case "gt"   : return Movie.ID.greaterThan(v);
                        case "ge"   : return Movie.ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movie.id."
                        );
                    }
                }
                case "name" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Movie.NAME.equal(v);
                        case "ne"   : return Movie.NAME.notEqual(v);
                        case "lt"   : return Movie.NAME.lessThan(v);
                        case "le"   : return Movie.NAME.lessOrEqual(v);
                        case "gt"   : return Movie.NAME.greaterThan(v);
                        case "ge"   : return Movie.NAME.greaterOrEqual(v);
                        case "like" : return Movie.NAME.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movie.name."
                        );
                    }
                }
                case "director" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Movie.DIRECTOR.equal(v);
                        case "ne"   : return Movie.DIRECTOR.notEqual(v);
                        case "lt"   : return Movie.DIRECTOR.lessThan(v);
                        case "le"   : return Movie.DIRECTOR.lessOrEqual(v);
                        case "gt"   : return Movie.DIRECTOR.greaterThan(v);
                        case "ge"   : return Movie.DIRECTOR.greaterOrEqual(v);
                        case "like" : return Movie.DIRECTOR.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movie.director."
                        );
                    }
                }
                case "actor" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Movie.ACTOR.equal(v);
                        case "ne"   : return Movie.ACTOR.notEqual(v);
                        case "lt"   : return Movie.ACTOR.lessThan(v);
                        case "le"   : return Movie.ACTOR.lessOrEqual(v);
                        case "gt"   : return Movie.ACTOR.greaterThan(v);
                        case "ge"   : return Movie.ACTOR.greaterOrEqual(v);
                        case "like" : return Movie.ACTOR.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movie.actor."
                        );
                    }
                }
                case "isSub" : {
                    final Byte v = Byte.parseByte(value());
                    switch (operator()) {
                        case "eq"   : return Movie.IS_SUB.equal(v);
                        case "ne"   : return Movie.IS_SUB.notEqual(v);
                        case "lt"   : return Movie.IS_SUB.lessThan(v);
                        case "le"   : return Movie.IS_SUB.lessOrEqual(v);
                        case "gt"   : return Movie.IS_SUB.greaterThan(v);
                        case "ge"   : return Movie.IS_SUB.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movie.isSub."
                        );
                    }
                }
                case "is2d" : {
                    final Byte v = Byte.parseByte(value());
                    switch (operator()) {
                        case "eq"   : return Movie.IS2D.equal(v);
                        case "ne"   : return Movie.IS2D.notEqual(v);
                        case "lt"   : return Movie.IS2D.lessThan(v);
                        case "le"   : return Movie.IS2D.lessOrEqual(v);
                        case "gt"   : return Movie.IS2D.greaterThan(v);
                        case "ge"   : return Movie.IS2D.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movie.is2d."
                        );
                    }
                }
                case "posterUrl" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Movie.POSTER_URL.equal(v);
                        case "ne"   : return Movie.POSTER_URL.notEqual(v);
                        case "lt"   : return Movie.POSTER_URL.lessThan(v);
                        case "le"   : return Movie.POSTER_URL.lessOrEqual(v);
                        case "gt"   : return Movie.POSTER_URL.greaterThan(v);
                        case "ge"   : return Movie.POSTER_URL.greaterOrEqual(v);
                        case "like" : return Movie.POSTER_URL.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movie.posterUrl."
                        );
                    }
                }
                case "startDate" : {
                    final Date v = Date.valueOf(value());
                    switch (operator()) {
                        case "eq"   : return Movie.START_DATE.equal(v);
                        case "ne"   : return Movie.START_DATE.notEqual(v);
                        case "lt"   : return Movie.START_DATE.lessThan(v);
                        case "le"   : return Movie.START_DATE.lessOrEqual(v);
                        case "gt"   : return Movie.START_DATE.greaterThan(v);
                        case "ge"   : return Movie.START_DATE.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movie.startDate."
                        );
                    }
                }
                case "endDate" : {
                    final Date v = Date.valueOf(value());
                    switch (operator()) {
                        case "eq"   : return Movie.END_DATE.equal(v);
                        case "ne"   : return Movie.END_DATE.notEqual(v);
                        case "lt"   : return Movie.END_DATE.lessThan(v);
                        case "le"   : return Movie.END_DATE.lessOrEqual(v);
                        case "gt"   : return Movie.END_DATE.greaterThan(v);
                        case "ge"   : return Movie.END_DATE.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movie.endDate."
                        );
                    }
                }
                case "duration" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Movie.DURATION.equal(v);
                        case "ne"   : return Movie.DURATION.notEqual(v);
                        case "lt"   : return Movie.DURATION.lessThan(v);
                        case "le"   : return Movie.DURATION.lessOrEqual(v);
                        case "gt"   : return Movie.DURATION.greaterThan(v);
                        case "ge"   : return Movie.DURATION.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movie.duration."
                        );
                    }
                }
                case "trailerUrl" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Movie.TRAILER_URL.equal(v);
                        case "ne"   : return Movie.TRAILER_URL.notEqual(v);
                        case "lt"   : return Movie.TRAILER_URL.lessThan(v);
                        case "le"   : return Movie.TRAILER_URL.lessOrEqual(v);
                        case "gt"   : return Movie.TRAILER_URL.greaterThan(v);
                        case "ge"   : return Movie.TRAILER_URL.greaterOrEqual(v);
                        case "like" : return Movie.TRAILER_URL.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movie.trailerUrl."
                        );
                    }
                }
                case "starRating" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Movie.STAR_RATING.equal(v);
                        case "ne"   : return Movie.STAR_RATING.notEqual(v);
                        case "lt"   : return Movie.STAR_RATING.lessThan(v);
                        case "le"   : return Movie.STAR_RATING.lessOrEqual(v);
                        case "gt"   : return Movie.STAR_RATING.greaterThan(v);
                        case "ge"   : return Movie.STAR_RATING.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movie.starRating."
                        );
                    }
                }
                case "movieRatedAgeId" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Movie.MOVIE_RATED_AGE_ID.equal(v);
                        case "ne"   : return Movie.MOVIE_RATED_AGE_ID.notEqual(v);
                        case "lt"   : return Movie.MOVIE_RATED_AGE_ID.lessThan(v);
                        case "le"   : return Movie.MOVIE_RATED_AGE_ID.lessOrEqual(v);
                        case "gt"   : return Movie.MOVIE_RATED_AGE_ID.greaterThan(v);
                        case "ge"   : return Movie.MOVIE_RATED_AGE_ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movie.movieRatedAgeId."
                        );
                    }
                }
                case "description" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Movie.DESCRIPTION.equal(v);
                        case "ne"   : return Movie.DESCRIPTION.notEqual(v);
                        case "lt"   : return Movie.DESCRIPTION.lessThan(v);
                        case "le"   : return Movie.DESCRIPTION.lessOrEqual(v);
                        case "gt"   : return Movie.DESCRIPTION.greaterThan(v);
                        case "ge"   : return Movie.DESCRIPTION.greaterOrEqual(v);
                        case "like" : return Movie.DESCRIPTION.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movie.description."
                        );
                    }
                }
                case "entertainment" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Movie.ENTERTAINMENT.equal(v);
                        case "ne"   : return Movie.ENTERTAINMENT.notEqual(v);
                        case "lt"   : return Movie.ENTERTAINMENT.lessThan(v);
                        case "le"   : return Movie.ENTERTAINMENT.lessOrEqual(v);
                        case "gt"   : return Movie.ENTERTAINMENT.greaterThan(v);
                        case "ge"   : return Movie.ENTERTAINMENT.greaterOrEqual(v);
                        case "like" : return Movie.ENTERTAINMENT.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movie.entertainment."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Movie property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public static final class MovieSort extends AbstractSort<Movie> {
        
        public MovieSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<Movie> toComparator() {
            final Comparator<Movie> comparator;
            switch (property()) {
                case "id"              : comparator = Movie.ID.comparator();                 break;
                case "name"            : comparator = Movie.NAME.comparator();               break;
                case "director"        : comparator = Movie.DIRECTOR.comparator();           break;
                case "actor"           : comparator = Movie.ACTOR.comparator();              break;
                case "isSub"           : comparator = Movie.IS_SUB.comparator();             break;
                case "is2d"            : comparator = Movie.IS2D.comparator();               break;
                case "posterUrl"       : comparator = Movie.POSTER_URL.comparator();         break;
                case "startDate"       : comparator = Movie.START_DATE.comparator();         break;
                case "endDate"         : comparator = Movie.END_DATE.comparator();           break;
                case "duration"        : comparator = Movie.DURATION.comparator();           break;
                case "trailerUrl"      : comparator = Movie.TRAILER_URL.comparator();        break;
                case "starRating"      : comparator = Movie.STAR_RATING.comparator();        break;
                case "movieRatedAgeId" : comparator = Movie.MOVIE_RATED_AGE_ID.comparator(); break;
                case "description"     : comparator = Movie.DESCRIPTION.comparator();        break;
                case "entertainment"   : comparator = Movie.ENTERTAINMENT.comparator();      break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Movie property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class CreateBody {
        
        private final String name;
        private final String director;
        private final String actor;
        private final Byte isSub;
        private final Byte is2d;
        private final String posterUrl;
        private final Date startDate;
        private final Date endDate;
        private final Integer duration;
        private final String trailerUrl;
        private final Integer starRating;
        private final Integer movieRatedAgeId;
        private final String description;
        private final String entertainment;
        
        @JsonCreator
        public CreateBody(
                @JsonProperty("name") String name,
                @JsonProperty("director") String director,
                @JsonProperty("actor") String actor,
                @JsonProperty("isSub") Byte isSub,
                @JsonProperty("is2d") Byte is2d,
                @JsonProperty("posterUrl") String posterUrl,
                @JsonProperty("startDate") Date startDate,
                @JsonProperty("endDate") Date endDate,
                @JsonProperty("duration") Integer duration,
                @JsonProperty("trailerUrl") String trailerUrl,
                @JsonProperty("starRating") Integer starRating,
                @JsonProperty("movieRatedAgeId") Integer movieRatedAgeId,
                @JsonProperty("description") String description,
                @JsonProperty("entertainment") String entertainment) {
            this.name =name;
            this.director = director;
            this.actor = actor;
            this.isSub = isSub;
            this.is2d = is2d;
            this.posterUrl = posterUrl;
            this.startDate = startDate;
            this.endDate = endDate;
            this.duration = duration;
            this.trailerUrl = trailerUrl;
            this.starRating = starRating;
            this.movieRatedAgeId = movieRatedAgeId;
            this.description = description;
            this.entertainment = entertainment;
        }
        
        public String getName() {
            return this.name;
        }
        
        public String getDirector() {
            return this.director;
        }
        
        public String getActor() {
            return this.actor;
        }
        
        public Byte getIsSub() {
            return this.isSub;
        }
        
        public Byte getIs2d() {
            return this.is2d;
        }
        
        public String getPosterUrl() {
            return this.posterUrl;
        }
        
        public Date getStartDate() {
            return this.startDate;
        }
        
        public Date getEndDate() {
            return this.endDate;
        }
        
        public Integer getDuration() {
            return this.duration;
        }
        
        public String getTrailerUrl() {
            return this.trailerUrl;
        }
        
        public Integer getStarRating() {
            return this.starRating;
        }
        
        public Integer getMovieRatedAgeId() {
            return this.movieRatedAgeId;
        }
        
        public String getDescription() {
            return this.description;
        }
        
        public String getEntertainment() {
            return this.entertainment;
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class UpdateBody {

        private final String name;
        private final String director;
        private final String actor;
        private final Byte isSub;
        private final Byte is2d;
        private final String posterUrl;
        private final Date startDate;
        private final Date endDate;
        private final Integer duration;
        private final String trailerUrl;
        private final Integer starRating;
        private final Integer movieRatedAgeId;
        private final String description;
        private final String entertainment;
        
        @JsonCreator
        public UpdateBody(
                @JsonProperty("name") String name,
                @JsonProperty("director") String director,
                @JsonProperty("actor") String actor,
                @JsonProperty("isSub") Byte isSub,
                @JsonProperty("is2d") Byte is2d,
                @JsonProperty("posterUrl") String posterUrl,
                @JsonProperty("startDate") Date startDate,
                @JsonProperty("endDate") Date endDate,
                @JsonProperty("duration") Integer duration,
                @JsonProperty("trailerUrl") String trailerUrl,
                @JsonProperty("starRating") Integer starRating,
                @JsonProperty("movieRatedAgeId") Integer movieRatedAgeId,
                @JsonProperty("description") String description,
                @JsonProperty("entertainment") String entertainment) {
            this.name =name;
            this.director = director;
            this.actor = actor;
            this.isSub = isSub;
            this.is2d = is2d;
            this.posterUrl = posterUrl;
            this.startDate = startDate;
            this.endDate = endDate;
            this.duration = duration;
            this.trailerUrl = trailerUrl;
            this.starRating = starRating;
            this.movieRatedAgeId = movieRatedAgeId;
            this.description = description;
            this.entertainment = entertainment;
        }
        
        public String getName() {
            return this.name;
        }
        
        public String getDirector() {
            return this.director;
        }
        
        public String getActor() {
            return this.actor;
        }
        
        public Byte getIsSub() {
            return this.isSub;
        }
        
        public Byte getIs2d() {
            return this.is2d;
        }
        
        public String getPosterUrl() {
            return this.posterUrl;
        }
        
        public Date getStartDate() {
            return this.startDate;
        }
        
        public Date getEndDate() {
            return this.endDate;
        }
        
        public Integer getDuration() {
            return this.duration;
        }
        
        public String getTrailerUrl() {
            return this.trailerUrl;
        }
        
        public Integer getStarRating() {
            return this.starRating;
        }
        
        public Integer getMovieRatedAgeId() {
            return this.movieRatedAgeId;
        }
        
        public String getDescription() {
            return this.description;
        }
        
        public String getEntertainment() {
            return this.entertainment;
        }
    }
}