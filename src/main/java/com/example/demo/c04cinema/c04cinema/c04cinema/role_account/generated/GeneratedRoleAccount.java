package com.example.demo.c04cinema.c04cinema.c04cinema.role_account.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.account.Account;
import com.example.demo.c04cinema.c04cinema.c04cinema.role.Role;
import com.example.demo.c04cinema.c04cinema.c04cinema.role_account.RoleAccount;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.role_account.RoleAccount}-interface
 * representing entities of the {@code role_account}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedRoleAccount {
    
    /**
     * This Field corresponds to the {@link RoleAccount} field that can be
     * obtained using the {@link RoleAccount#getId()} method.
     */
    IntField<RoleAccount, Integer> ID = IntField.create(
        Identifier.ID,
        RoleAccount::getId,
        RoleAccount::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link RoleAccount} field that can be
     * obtained using the {@link RoleAccount#getRoleId()} method.
     */
    ComparableForeignKeyField<RoleAccount, Integer, Integer, Role> ROLE_ID = ComparableForeignKeyField.create(
        Identifier.ROLE_ID,
        o -> OptionalUtil.unwrap(o.getRoleId()),
        RoleAccount::setRoleId,
        Role.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link RoleAccount} field that can be
     * obtained using the {@link RoleAccount#getAccountId()} method.
     */
    ComparableForeignKeyField<RoleAccount, Integer, Integer, Account> ACCOUNT_ID = ComparableForeignKeyField.create(
        Identifier.ACCOUNT_ID,
        o -> OptionalUtil.unwrap(o.getAccountId()),
        RoleAccount::setAccountId,
        Account.ID,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this RoleAccount. The id field corresponds to the
     * database column c04cinema.c04cinema.role_account.id.
     * 
     * @return the id of this RoleAccount
     */
    int getId();
    
    /**
     * Returns the roleId of this RoleAccount. The roleId field corresponds to
     * the database column c04cinema.c04cinema.role_account.role_id.
     * 
     * @return the roleId of this RoleAccount
     */
    OptionalInt getRoleId();
    
    /**
     * Returns the accountId of this RoleAccount. The accountId field
     * corresponds to the database column
     * c04cinema.c04cinema.role_account.account_id.
     * 
     * @return the accountId of this RoleAccount
     */
    OptionalInt getAccountId();
    
    /**
     * Sets the id of this RoleAccount. The id field corresponds to the database
     * column c04cinema.c04cinema.role_account.id.
     * 
     * @param id to set of this RoleAccount
     * @return   this RoleAccount instance
     */
    RoleAccount setId(int id);
    
    /**
     * Sets the roleId of this RoleAccount. The roleId field corresponds to the
     * database column c04cinema.c04cinema.role_account.role_id.
     * 
     * @param roleId to set of this RoleAccount
     * @return       this RoleAccount instance
     */
    RoleAccount setRoleId(Integer roleId);
    
    /**
     * Sets the accountId of this RoleAccount. The accountId field corresponds
     * to the database column c04cinema.c04cinema.role_account.account_id.
     * 
     * @param accountId to set of this RoleAccount
     * @return          this RoleAccount instance
     */
    RoleAccount setAccountId(Integer accountId);
    
    /**
     * Queries the specified manager for the referenced Role. If no such Role
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Role> findRoleId(Manager<Role> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Account. If no such
     * Account exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Account> findAccountId(Manager<Account> foreignManager);
    
    enum Identifier implements ColumnIdentifier<RoleAccount> {
        
        ID         ("id"),
        ROLE_ID    ("role_id"),
        ACCOUNT_ID ("account_id");
        
        private final String columnId;
        private final TableIdentifier<RoleAccount> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "c04cinema";
        }
        
        @Override
        public String getSchemaId() {
            return "c04cinema";
        }
        
        @Override
        public String getTableId() {
            return "role_account";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<RoleAccount> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}