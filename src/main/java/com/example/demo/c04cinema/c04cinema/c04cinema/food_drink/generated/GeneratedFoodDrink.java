package com.example.demo.c04cinema.c04cinema.c04cinema.food_drink.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.food_drink.FoodDrink;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalDouble;

/**
 * The generated base for the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.food_drink.FoodDrink}-interface
 * representing entities of the {@code food_drink}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedFoodDrink {
    
    /**
     * This Field corresponds to the {@link FoodDrink} field that can be
     * obtained using the {@link FoodDrink#getId()} method.
     */
    IntField<FoodDrink, Integer> ID = IntField.create(
        Identifier.ID,
        FoodDrink::getId,
        FoodDrink::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link FoodDrink} field that can be
     * obtained using the {@link FoodDrink#getName()} method.
     */
    StringField<FoodDrink, String> NAME = StringField.create(
        Identifier.NAME,
        o -> OptionalUtil.unwrap(o.getName()),
        FoodDrink::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link FoodDrink} field that can be
     * obtained using the {@link FoodDrink#getPrice()} method.
     */
    ComparableField<FoodDrink, Double, Double> PRICE = ComparableField.create(
        Identifier.PRICE,
        o -> OptionalUtil.unwrap(o.getPrice()),
        FoodDrink::setPrice,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link FoodDrink} field that can be
     * obtained using the {@link FoodDrink#getDescription()} method.
     */
    StringField<FoodDrink, String> DESCRIPTION = StringField.create(
        Identifier.DESCRIPTION,
        o -> OptionalUtil.unwrap(o.getDescription()),
        FoodDrink::setDescription,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link FoodDrink} field that can be
     * obtained using the {@link FoodDrink#getImageUrl()} method.
     */
    StringField<FoodDrink, String> IMAGE_URL = StringField.create(
        Identifier.IMAGE_URL,
        o -> OptionalUtil.unwrap(o.getImageUrl()),
        FoodDrink::setImageUrl,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this FoodDrink. The id field corresponds to the
     * database column c04cinema.c04cinema.food_drink.id.
     * 
     * @return the id of this FoodDrink
     */
    int getId();
    
    /**
     * Returns the name of this FoodDrink. The name field corresponds to the
     * database column c04cinema.c04cinema.food_drink.name.
     * 
     * @return the name of this FoodDrink
     */
    Optional<String> getName();
    
    /**
     * Returns the price of this FoodDrink. The price field corresponds to the
     * database column c04cinema.c04cinema.food_drink.price.
     * 
     * @return the price of this FoodDrink
     */
    OptionalDouble getPrice();
    
    /**
     * Returns the description of this FoodDrink. The description field
     * corresponds to the database column
     * c04cinema.c04cinema.food_drink.description.
     * 
     * @return the description of this FoodDrink
     */
    Optional<String> getDescription();
    
    /**
     * Returns the imageUrl of this FoodDrink. The imageUrl field corresponds to
     * the database column c04cinema.c04cinema.food_drink.image_url.
     * 
     * @return the imageUrl of this FoodDrink
     */
    Optional<String> getImageUrl();
    
    /**
     * Sets the id of this FoodDrink. The id field corresponds to the database
     * column c04cinema.c04cinema.food_drink.id.
     * 
     * @param id to set of this FoodDrink
     * @return   this FoodDrink instance
     */
    FoodDrink setId(int id);
    
    /**
     * Sets the name of this FoodDrink. The name field corresponds to the
     * database column c04cinema.c04cinema.food_drink.name.
     * 
     * @param name to set of this FoodDrink
     * @return     this FoodDrink instance
     */
    FoodDrink setName(String name);
    
    /**
     * Sets the price of this FoodDrink. The price field corresponds to the
     * database column c04cinema.c04cinema.food_drink.price.
     * 
     * @param price to set of this FoodDrink
     * @return      this FoodDrink instance
     */
    FoodDrink setPrice(Double price);
    
    /**
     * Sets the description of this FoodDrink. The description field corresponds
     * to the database column c04cinema.c04cinema.food_drink.description.
     * 
     * @param description to set of this FoodDrink
     * @return            this FoodDrink instance
     */
    FoodDrink setDescription(String description);
    
    /**
     * Sets the imageUrl of this FoodDrink. The imageUrl field corresponds to
     * the database column c04cinema.c04cinema.food_drink.image_url.
     * 
     * @param imageUrl to set of this FoodDrink
     * @return         this FoodDrink instance
     */
    FoodDrink setImageUrl(String imageUrl);
    
    enum Identifier implements ColumnIdentifier<FoodDrink> {
        
        ID          ("id"),
        NAME        ("name"),
        PRICE       ("price"),
        DESCRIPTION ("description"),
        IMAGE_URL   ("image_url");
        
        private final String columnId;
        private final TableIdentifier<FoodDrink> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "c04cinema";
        }
        
        @Override
        public String getSchemaId() {
            return "c04cinema";
        }
        
        @Override
        public String getTableId() {
            return "food_drink";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<FoodDrink> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}