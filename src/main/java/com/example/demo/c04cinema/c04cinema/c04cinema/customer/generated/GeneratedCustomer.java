package com.example.demo.c04cinema.c04cinema.c04cinema.customer.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.account.Account;
import com.example.demo.c04cinema.c04cinema.c04cinema.customer.Customer;
import com.example.demo.c04cinema.c04cinema.c04cinema.customer_type.CustomerType;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Date;
import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.customer.Customer}-interface
 * representing entities of the {@code customer}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedCustomer {
    
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getId()} method.
     */
    IntField<Customer, Integer> ID = IntField.create(
        Identifier.ID,
        Customer::getId,
        Customer::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getName()} method.
     */
    StringField<Customer, String> NAME = StringField.create(
        Identifier.NAME,
        o -> OptionalUtil.unwrap(o.getName()),
        Customer::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getAddress()} method.
     */
    StringField<Customer, String> ADDRESS = StringField.create(
        Identifier.ADDRESS,
        o -> OptionalUtil.unwrap(o.getAddress()),
        Customer::setAddress,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getCustomerTypeId()} method.
     */
    ComparableForeignKeyField<Customer, Integer, Integer, CustomerType> CUSTOMER_TYPE_ID = ComparableForeignKeyField.create(
        Identifier.CUSTOMER_TYPE_ID,
        o -> OptionalUtil.unwrap(o.getCustomerTypeId()),
        Customer::setCustomerTypeId,
        CustomerType.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getCurrentBonusPoint()} method.
     */
    ComparableField<Customer, Integer, Integer> CURRENT_BONUS_POINT = ComparableField.create(
        Identifier.CURRENT_BONUS_POINT,
        o -> OptionalUtil.unwrap(o.getCurrentBonusPoint()),
        Customer::setCurrentBonusPoint,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getAccountId()} method.
     */
    ComparableForeignKeyField<Customer, Integer, Integer, Account> ACCOUNT_ID = ComparableForeignKeyField.create(
        Identifier.ACCOUNT_ID,
        o -> OptionalUtil.unwrap(o.getAccountId()),
        Customer::setAccountId,
        Account.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getEmail()} method.
     */
    StringField<Customer, String> EMAIL = StringField.create(
        Identifier.EMAIL,
        o -> OptionalUtil.unwrap(o.getEmail()),
        Customer::setEmail,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getBirthday()} method.
     */
    ComparableField<Customer, Date, Date> BIRTHDAY = ComparableField.create(
        Identifier.BIRTHDAY,
        o -> OptionalUtil.unwrap(o.getBirthday()),
        Customer::setBirthday,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getPhone()} method.
     */
    StringField<Customer, String> PHONE = StringField.create(
        Identifier.PHONE,
        o -> OptionalUtil.unwrap(o.getPhone()),
        Customer::setPhone,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getIsactive()} method.
     */
    ComparableField<Customer, Byte, Byte> ISACTIVE = ComparableField.create(
        Identifier.ISACTIVE,
        o -> OptionalUtil.unwrap(o.getIsactive()),
        Customer::setIsactive,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getGender()} method.
     */
    StringField<Customer, String> GENDER = StringField.create(
        Identifier.GENDER,
        o -> OptionalUtil.unwrap(o.getGender()),
        Customer::setGender,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getCardid()} method.
     */
    StringField<Customer, String> CARDID = StringField.create(
        Identifier.CARDID,
        o -> OptionalUtil.unwrap(o.getCardid()),
        Customer::setCardid,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getCode()} method.
     */
    StringField<Customer, String> CODE = StringField.create(
        Identifier.CODE,
        o -> OptionalUtil.unwrap(o.getCode()),
        Customer::setCode,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Customer} field that can be obtained
     * using the {@link Customer#getImageUrl()} method.
     */
    StringField<Customer, String> IMAGE_URL = StringField.create(
        Identifier.IMAGE_URL,
        o -> OptionalUtil.unwrap(o.getImageUrl()),
        Customer::setImageUrl,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Customer. The id field corresponds to the database
     * column c04cinema.c04cinema.customer.id.
     * 
     * @return the id of this Customer
     */
    int getId();
    
    /**
     * Returns the name of this Customer. The name field corresponds to the
     * database column c04cinema.c04cinema.customer.name.
     * 
     * @return the name of this Customer
     */
    Optional<String> getName();
    
    /**
     * Returns the address of this Customer. The address field corresponds to
     * the database column c04cinema.c04cinema.customer.address.
     * 
     * @return the address of this Customer
     */
    Optional<String> getAddress();
    
    /**
     * Returns the customerTypeId of this Customer. The customerTypeId field
     * corresponds to the database column
     * c04cinema.c04cinema.customer.customer_type_id.
     * 
     * @return the customerTypeId of this Customer
     */
    OptionalInt getCustomerTypeId();
    
    /**
     * Returns the currentBonusPoint of this Customer. The currentBonusPoint
     * field corresponds to the database column
     * c04cinema.c04cinema.customer.current_bonus_point.
     * 
     * @return the currentBonusPoint of this Customer
     */
    OptionalInt getCurrentBonusPoint();
    
    /**
     * Returns the accountId of this Customer. The accountId field corresponds
     * to the database column c04cinema.c04cinema.customer.account_id.
     * 
     * @return the accountId of this Customer
     */
    OptionalInt getAccountId();
    
    /**
     * Returns the email of this Customer. The email field corresponds to the
     * database column c04cinema.c04cinema.customer.email.
     * 
     * @return the email of this Customer
     */
    Optional<String> getEmail();
    
    /**
     * Returns the birthday of this Customer. The birthday field corresponds to
     * the database column c04cinema.c04cinema.customer.birthday.
     * 
     * @return the birthday of this Customer
     */
    Optional<Date> getBirthday();
    
    /**
     * Returns the phone of this Customer. The phone field corresponds to the
     * database column c04cinema.c04cinema.customer.phone.
     * 
     * @return the phone of this Customer
     */
    Optional<String> getPhone();
    
    /**
     * Returns the isactive of this Customer. The isactive field corresponds to
     * the database column c04cinema.c04cinema.customer.isactive.
     * 
     * @return the isactive of this Customer
     */
    Optional<Byte> getIsactive();
    
    /**
     * Returns the gender of this Customer. The gender field corresponds to the
     * database column c04cinema.c04cinema.customer.gender.
     * 
     * @return the gender of this Customer
     */
    Optional<String> getGender();
    
    /**
     * Returns the cardid of this Customer. The cardid field corresponds to the
     * database column c04cinema.c04cinema.customer.cardid.
     * 
     * @return the cardid of this Customer
     */
    Optional<String> getCardid();
    
    /**
     * Returns the code of this Customer. The code field corresponds to the
     * database column c04cinema.c04cinema.customer.code.
     * 
     * @return the code of this Customer
     */
    Optional<String> getCode();
    
    /**
     * Returns the imageUrl of this Customer. The imageUrl field corresponds to
     * the database column c04cinema.c04cinema.customer.image_url.
     * 
     * @return the imageUrl of this Customer
     */
    Optional<String> getImageUrl();
    
    /**
     * Sets the id of this Customer. The id field corresponds to the database
     * column c04cinema.c04cinema.customer.id.
     * 
     * @param id to set of this Customer
     * @return   this Customer instance
     */
    Customer setId(int id);
    
    /**
     * Sets the name of this Customer. The name field corresponds to the
     * database column c04cinema.c04cinema.customer.name.
     * 
     * @param name to set of this Customer
     * @return     this Customer instance
     */
    Customer setName(String name);
    
    /**
     * Sets the address of this Customer. The address field corresponds to the
     * database column c04cinema.c04cinema.customer.address.
     * 
     * @param address to set of this Customer
     * @return        this Customer instance
     */
    Customer setAddress(String address);
    
    /**
     * Sets the customerTypeId of this Customer. The customerTypeId field
     * corresponds to the database column
     * c04cinema.c04cinema.customer.customer_type_id.
     * 
     * @param customerTypeId to set of this Customer
     * @return               this Customer instance
     */
    Customer setCustomerTypeId(Integer customerTypeId);
    
    /**
     * Sets the currentBonusPoint of this Customer. The currentBonusPoint field
     * corresponds to the database column
     * c04cinema.c04cinema.customer.current_bonus_point.
     * 
     * @param currentBonusPoint to set of this Customer
     * @return                  this Customer instance
     */
    Customer setCurrentBonusPoint(Integer currentBonusPoint);
    
    /**
     * Sets the accountId of this Customer. The accountId field corresponds to
     * the database column c04cinema.c04cinema.customer.account_id.
     * 
     * @param accountId to set of this Customer
     * @return          this Customer instance
     */
    Customer setAccountId(Integer accountId);
    
    /**
     * Sets the email of this Customer. The email field corresponds to the
     * database column c04cinema.c04cinema.customer.email.
     * 
     * @param email to set of this Customer
     * @return      this Customer instance
     */
    Customer setEmail(String email);
    
    /**
     * Sets the birthday of this Customer. The birthday field corresponds to the
     * database column c04cinema.c04cinema.customer.birthday.
     * 
     * @param birthday to set of this Customer
     * @return         this Customer instance
     */
    Customer setBirthday(Date birthday);
    
    /**
     * Sets the phone of this Customer. The phone field corresponds to the
     * database column c04cinema.c04cinema.customer.phone.
     * 
     * @param phone to set of this Customer
     * @return      this Customer instance
     */
    Customer setPhone(String phone);
    
    /**
     * Sets the isactive of this Customer. The isactive field corresponds to the
     * database column c04cinema.c04cinema.customer.isactive.
     * 
     * @param isactive to set of this Customer
     * @return         this Customer instance
     */
    Customer setIsactive(Byte isactive);
    
    /**
     * Sets the gender of this Customer. The gender field corresponds to the
     * database column c04cinema.c04cinema.customer.gender.
     * 
     * @param gender to set of this Customer
     * @return       this Customer instance
     */
    Customer setGender(String gender);
    
    /**
     * Sets the cardid of this Customer. The cardid field corresponds to the
     * database column c04cinema.c04cinema.customer.cardid.
     * 
     * @param cardid to set of this Customer
     * @return       this Customer instance
     */
    Customer setCardid(String cardid);
    
    /**
     * Sets the code of this Customer. The code field corresponds to the
     * database column c04cinema.c04cinema.customer.code.
     * 
     * @param code to set of this Customer
     * @return     this Customer instance
     */
    Customer setCode(String code);
    
    /**
     * Sets the imageUrl of this Customer. The imageUrl field corresponds to the
     * database column c04cinema.c04cinema.customer.image_url.
     * 
     * @param imageUrl to set of this Customer
     * @return         this Customer instance
     */
    Customer setImageUrl(String imageUrl);
    
    /**
     * Queries the specified manager for the referenced CustomerType. If no such
     * CustomerType exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<CustomerType> findCustomerTypeId(Manager<CustomerType> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Account. If no such
     * Account exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Account> findAccountId(Manager<Account> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Customer> {
        
        ID                  ("id"),
        NAME                ("name"),
        ADDRESS             ("address"),
        CUSTOMER_TYPE_ID    ("customer_type_id"),
        CURRENT_BONUS_POINT ("current_bonus_point"),
        ACCOUNT_ID          ("account_id"),
        EMAIL               ("email"),
        BIRTHDAY            ("birthday"),
        PHONE               ("phone"),
        ISACTIVE            ("isactive"),
        GENDER              ("gender"),
        CARDID              ("cardid"),
        CODE                ("code"),
        IMAGE_URL           ("image_url");
        
        private final String columnId;
        private final TableIdentifier<Customer> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "c04cinema";
        }
        
        @Override
        public String getSchemaId() {
            return "c04cinema";
        }
        
        @Override
        public String getTableId() {
            return "customer";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Customer> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}