package com.example.demo.c04cinema.c04cinema.c04cinema.movie_rated_age.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.movie_rated_age.MovieRatedAge;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;

/**
 * The generated base for the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.movie_rated_age.MovieRatedAge}-interface
 * representing entities of the {@code movie_rated_age}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedMovieRatedAge {
    
    /**
     * This Field corresponds to the {@link MovieRatedAge} field that can be
     * obtained using the {@link MovieRatedAge#getId()} method.
     */
    IntField<MovieRatedAge, Integer> ID = IntField.create(
        Identifier.ID,
        MovieRatedAge::getId,
        MovieRatedAge::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link MovieRatedAge} field that can be
     * obtained using the {@link MovieRatedAge#getName()} method.
     */
    StringField<MovieRatedAge, String> NAME = StringField.create(
        Identifier.NAME,
        o -> OptionalUtil.unwrap(o.getName()),
        MovieRatedAge::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link MovieRatedAge} field that can be
     * obtained using the {@link MovieRatedAge#getDescription()} method.
     */
    StringField<MovieRatedAge, String> DESCRIPTION = StringField.create(
        Identifier.DESCRIPTION,
        o -> OptionalUtil.unwrap(o.getDescription()),
        MovieRatedAge::setDescription,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this MovieRatedAge. The id field corresponds to the
     * database column c04cinema.c04cinema.movie_rated_age.id.
     * 
     * @return the id of this MovieRatedAge
     */
    int getId();
    
    /**
     * Returns the name of this MovieRatedAge. The name field corresponds to the
     * database column c04cinema.c04cinema.movie_rated_age.name.
     * 
     * @return the name of this MovieRatedAge
     */
    Optional<String> getName();
    
    /**
     * Returns the description of this MovieRatedAge. The description field
     * corresponds to the database column
     * c04cinema.c04cinema.movie_rated_age.description.
     * 
     * @return the description of this MovieRatedAge
     */
    Optional<String> getDescription();
    
    /**
     * Sets the id of this MovieRatedAge. The id field corresponds to the
     * database column c04cinema.c04cinema.movie_rated_age.id.
     * 
     * @param id to set of this MovieRatedAge
     * @return   this MovieRatedAge instance
     */
    MovieRatedAge setId(int id);
    
    /**
     * Sets the name of this MovieRatedAge. The name field corresponds to the
     * database column c04cinema.c04cinema.movie_rated_age.name.
     * 
     * @param name to set of this MovieRatedAge
     * @return     this MovieRatedAge instance
     */
    MovieRatedAge setName(String name);
    
    /**
     * Sets the description of this MovieRatedAge. The description field
     * corresponds to the database column
     * c04cinema.c04cinema.movie_rated_age.description.
     * 
     * @param description to set of this MovieRatedAge
     * @return            this MovieRatedAge instance
     */
    MovieRatedAge setDescription(String description);
    
    enum Identifier implements ColumnIdentifier<MovieRatedAge> {
        
        ID          ("id"),
        NAME        ("name"),
        DESCRIPTION ("description");
        
        private final String columnId;
        private final TableIdentifier<MovieRatedAge> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "c04cinema";
        }
        
        @Override
        public String getSchemaId() {
            return "c04cinema";
        }
        
        @Override
        public String getTableId() {
            return "movie_rated_age";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<MovieRatedAge> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}