package com.example.demo.c04cinema.c04cinema.c04cinema.role_account.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.account.Account;
import com.example.demo.c04cinema.c04cinema.c04cinema.role.Role;
import com.example.demo.c04cinema.c04cinema.c04cinema.role_account.RoleAccount;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.role_account.RoleAccount}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedRoleAccountImpl implements RoleAccount {
    
    private int id;
    private Integer roleId;
    private Integer accountId;
    
    protected GeneratedRoleAccountImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public OptionalInt getRoleId() {
        return OptionalUtil.ofNullable(roleId);
    }
    
    @Override
    public OptionalInt getAccountId() {
        return OptionalUtil.ofNullable(accountId);
    }
    
    @Override
    public RoleAccount setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public RoleAccount setRoleId(Integer roleId) {
        this.roleId = roleId;
        return this;
    }
    
    @Override
    public RoleAccount setAccountId(Integer accountId) {
        this.accountId = accountId;
        return this;
    }
    
    @Override
    public Optional<Role> findRoleId(Manager<Role> foreignManager) {
        if (getRoleId().isPresent()) {
            return foreignManager.stream().filter(Role.ID.equal(getRoleId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<Account> findAccountId(Manager<Account> foreignManager) {
        if (getAccountId().isPresent()) {
            return foreignManager.stream().filter(Account.ID.equal(getAccountId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "        + Objects.toString(getId()));
        sj.add("roleId = "    + Objects.toString(OptionalUtil.unwrap(getRoleId())));
        sj.add("accountId = " + Objects.toString(OptionalUtil.unwrap(getAccountId())));
        return "RoleAccountImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof RoleAccount)) { return false; }
        final RoleAccount thatRoleAccount = (RoleAccount)that;
        if (this.getId() != thatRoleAccount.getId()) { return false; }
        if (!Objects.equals(this.getRoleId(), thatRoleAccount.getRoleId())) { return false; }
        if (!Objects.equals(this.getAccountId(), thatRoleAccount.getAccountId())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getRoleId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getAccountId()));
        return hash;
    }
}