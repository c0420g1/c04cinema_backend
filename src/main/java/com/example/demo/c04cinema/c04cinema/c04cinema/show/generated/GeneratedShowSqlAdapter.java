package com.example.demo.c04cinema.c04cinema.c04cinema.show.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.show.Show;
import com.example.demo.c04cinema.c04cinema.c04cinema.show.ShowImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDateTime;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.util.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.show.Show} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedShowSqlAdapter implements SqlAdapter<Show> {
    
    private final TableIdentifier<Show> tableIdentifier;
    private SqlTypeMapperHelper<Timestamp, LocalDateTime> startTimeHelper;
    
    protected GeneratedShowSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("c04cinema", "c04cinema", "show");
    }
    
    protected Show apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(          resultSet.getInt(1 + offset))
            .setStartTime(   startTimeHelper.apply(resultSet.getTimestamp(2 + offset)))
            .setHallId(      resultSet.getInt(3 + offset))
            .setMovieId(     getInt(resultSet, 4 + offset))
            .setPrice(       getDouble(resultSet, 5 + offset))
            .setDescription( resultSet.getString(6 + offset))
            .setIsearly(     getByte(resultSet, 7 + offset))
            ;
    }
    
    protected ShowImpl createEntity() {
        return new ShowImpl();
    }
    
    @Override
    public TableIdentifier<Show> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Show> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Show> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
    
    @ExecuteBefore(RESOLVED)
    public void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        startTimeHelper = SqlTypeMapperHelper.create(project, Show.START_TIME, Show.class);
    }
}