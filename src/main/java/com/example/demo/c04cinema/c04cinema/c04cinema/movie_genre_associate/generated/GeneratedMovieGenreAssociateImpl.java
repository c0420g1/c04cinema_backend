package com.example.demo.c04cinema.c04cinema.c04cinema.movie_genre_associate.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.movie.Movie;
import com.example.demo.c04cinema.c04cinema.c04cinema.movie_genre_associate.MovieGenreAssociate;
import com.example.demo.c04cinema.c04cinema.c04cinema.movie_genre_type.MovieGenreType;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.movie_genre_associate.MovieGenreAssociate}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMovieGenreAssociateImpl implements MovieGenreAssociate {
    
    private int id;
    private Integer movieId;
    private Integer movieGenreTypeId;
    
    protected GeneratedMovieGenreAssociateImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public OptionalInt getMovieId() {
        return OptionalUtil.ofNullable(movieId);
    }
    
    @Override
    public OptionalInt getMovieGenreTypeId() {
        return OptionalUtil.ofNullable(movieGenreTypeId);
    }
    
    @Override
    public MovieGenreAssociate setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public MovieGenreAssociate setMovieId(Integer movieId) {
        this.movieId = movieId;
        return this;
    }
    
    @Override
    public MovieGenreAssociate setMovieGenreTypeId(Integer movieGenreTypeId) {
        this.movieGenreTypeId = movieGenreTypeId;
        return this;
    }
    
    @Override
    public Optional<Movie> findMovieId(Manager<Movie> foreignManager) {
        if (getMovieId().isPresent()) {
            return foreignManager.stream().filter(Movie.ID.equal(getMovieId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<MovieGenreType> findMovieGenreTypeId(Manager<MovieGenreType> foreignManager) {
        if (getMovieGenreTypeId().isPresent()) {
            return foreignManager.stream().filter(MovieGenreType.ID.equal(getMovieGenreTypeId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "               + Objects.toString(getId()));
        sj.add("movieId = "          + Objects.toString(OptionalUtil.unwrap(getMovieId())));
        sj.add("movieGenreTypeId = " + Objects.toString(OptionalUtil.unwrap(getMovieGenreTypeId())));
        return "MovieGenreAssociateImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof MovieGenreAssociate)) { return false; }
        final MovieGenreAssociate thatMovieGenreAssociate = (MovieGenreAssociate)that;
        if (this.getId() != thatMovieGenreAssociate.getId()) { return false; }
        if (!Objects.equals(this.getMovieId(), thatMovieGenreAssociate.getMovieId())) { return false; }
        if (!Objects.equals(this.getMovieGenreTypeId(), thatMovieGenreAssociate.getMovieGenreTypeId())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getMovieId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getMovieGenreTypeId()));
        return hash;
    }
}