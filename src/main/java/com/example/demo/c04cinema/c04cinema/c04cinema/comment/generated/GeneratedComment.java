package com.example.demo.c04cinema.c04cinema.c04cinema.comment.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.comment.Comment;
import com.example.demo.c04cinema.c04cinema.c04cinema.customer.Customer;
import com.example.demo.c04cinema.c04cinema.c04cinema.movie.Movie;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import com.speedment.runtime.typemapper.time.TimestampToLocalDateTimeMapper;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.comment.Comment}-interface
 * representing entities of the {@code comment}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedComment {
    
    /**
     * This Field corresponds to the {@link Comment} field that can be obtained
     * using the {@link Comment#getId()} method.
     */
    IntField<Comment, Integer> ID = IntField.create(
        Identifier.ID,
        Comment::getId,
        Comment::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Comment} field that can be obtained
     * using the {@link Comment#getCustomerId()} method.
     */
    ComparableForeignKeyField<Comment, Integer, Integer, Customer> CUSTOMER_ID = ComparableForeignKeyField.create(
        Identifier.CUSTOMER_ID,
        o -> OptionalUtil.unwrap(o.getCustomerId()),
        Comment::setCustomerId,
        Customer.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Comment} field that can be obtained
     * using the {@link Comment#getMovieId()} method.
     */
    ComparableForeignKeyField<Comment, Integer, Integer, Movie> MOVIE_ID = ComparableForeignKeyField.create(
        Identifier.MOVIE_ID,
        o -> OptionalUtil.unwrap(o.getMovieId()),
        Comment::setMovieId,
        Movie.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Comment} field that can be obtained
     * using the {@link Comment#getComment()} method.
     */
    StringField<Comment, String> COMMENT = StringField.create(
        Identifier.COMMENT,
        o -> OptionalUtil.unwrap(o.getComment()),
        Comment::setComment,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Comment} field that can be obtained
     * using the {@link Comment#getCreateDate()} method.
     */
    ComparableField<Comment, Timestamp, LocalDateTime> CREATE_DATE = ComparableField.create(
        Identifier.CREATE_DATE,
        o -> OptionalUtil.unwrap(o.getCreateDate()),
        Comment::setCreateDate,
        new TimestampToLocalDateTimeMapper(),
        false
    );
    /**
     * This Field corresponds to the {@link Comment} field that can be obtained
     * using the {@link Comment#getReplyOneCustomId()} method.
     */
    ComparableField<Comment, Integer, Integer> REPLY_ONE_CUSTOM_ID = ComparableField.create(
        Identifier.REPLY_ONE_CUSTOM_ID,
        o -> OptionalUtil.unwrap(o.getReplyOneCustomId()),
        Comment::setReplyOneCustomId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Comment} field that can be obtained
     * using the {@link Comment#getLike()} method.
     */
    ComparableField<Comment, Integer, Integer> LIKE = ComparableField.create(
        Identifier.LIKE,
        o -> OptionalUtil.unwrap(o.getLike()),
        Comment::setLike,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Comment} field that can be obtained
     * using the {@link Comment#getEmotion()} method.
     */
    StringField<Comment, String> EMOTION = StringField.create(
        Identifier.EMOTION,
        o -> OptionalUtil.unwrap(o.getEmotion()),
        Comment::setEmotion,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Comment} field that can be obtained
     * using the {@link Comment#getReplyTwoCustomId()} method.
     */
    ComparableField<Comment, Integer, Integer> REPLY_TWO_CUSTOM_ID = ComparableField.create(
        Identifier.REPLY_TWO_CUSTOM_ID,
        o -> OptionalUtil.unwrap(o.getReplyTwoCustomId()),
        Comment::setReplyTwoCustomId,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Comment. The id field corresponds to the database
     * column c04cinema.c04cinema.comment.id.
     * 
     * @return the id of this Comment
     */
    int getId();
    
    /**
     * Returns the customerId of this Comment. The customerId field corresponds
     * to the database column c04cinema.c04cinema.comment.customer_id.
     * 
     * @return the customerId of this Comment
     */
    OptionalInt getCustomerId();
    
    /**
     * Returns the movieId of this Comment. The movieId field corresponds to the
     * database column c04cinema.c04cinema.comment.movie_id.
     * 
     * @return the movieId of this Comment
     */
    OptionalInt getMovieId();
    
    /**
     * Returns the comment of this Comment. The comment field corresponds to the
     * database column c04cinema.c04cinema.comment.comment.
     * 
     * @return the comment of this Comment
     */
    Optional<String> getComment();
    
    /**
     * Returns the createDate of this Comment. The createDate field corresponds
     * to the database column c04cinema.c04cinema.comment.createDate.
     * 
     * @return the createDate of this Comment
     */
    Optional<LocalDateTime> getCreateDate();
    
    /**
     * Returns the replyOneCustomId of this Comment. The replyOneCustomId field
     * corresponds to the database column
     * c04cinema.c04cinema.comment.reply_one_custom_id.
     * 
     * @return the replyOneCustomId of this Comment
     */
    OptionalInt getReplyOneCustomId();
    
    /**
     * Returns the like of this Comment. The like field corresponds to the
     * database column c04cinema.c04cinema.comment.like.
     * 
     * @return the like of this Comment
     */
    OptionalInt getLike();
    
    /**
     * Returns the emotion of this Comment. The emotion field corresponds to the
     * database column c04cinema.c04cinema.comment.emotion.
     * 
     * @return the emotion of this Comment
     */
    Optional<String> getEmotion();
    
    /**
     * Returns the replyTwoCustomId of this Comment. The replyTwoCustomId field
     * corresponds to the database column
     * c04cinema.c04cinema.comment.reply_two_custom_id.
     * 
     * @return the replyTwoCustomId of this Comment
     */
    OptionalInt getReplyTwoCustomId();
    
    /**
     * Sets the id of this Comment. The id field corresponds to the database
     * column c04cinema.c04cinema.comment.id.
     * 
     * @param id to set of this Comment
     * @return   this Comment instance
     */
    Comment setId(int id);
    
    /**
     * Sets the customerId of this Comment. The customerId field corresponds to
     * the database column c04cinema.c04cinema.comment.customer_id.
     * 
     * @param customerId to set of this Comment
     * @return           this Comment instance
     */
    Comment setCustomerId(Integer customerId);
    
    /**
     * Sets the movieId of this Comment. The movieId field corresponds to the
     * database column c04cinema.c04cinema.comment.movie_id.
     * 
     * @param movieId to set of this Comment
     * @return        this Comment instance
     */
    Comment setMovieId(Integer movieId);
    
    /**
     * Sets the comment of this Comment. The comment field corresponds to the
     * database column c04cinema.c04cinema.comment.comment.
     * 
     * @param comment to set of this Comment
     * @return        this Comment instance
     */
    Comment setComment(String comment);
    
    /**
     * Sets the createDate of this Comment. The createDate field corresponds to
     * the database column c04cinema.c04cinema.comment.createDate.
     * 
     * @param createDate to set of this Comment
     * @return           this Comment instance
     */
    Comment setCreateDate(LocalDateTime createDate);
    
    /**
     * Sets the replyOneCustomId of this Comment. The replyOneCustomId field
     * corresponds to the database column
     * c04cinema.c04cinema.comment.reply_one_custom_id.
     * 
     * @param replyOneCustomId to set of this Comment
     * @return                 this Comment instance
     */
    Comment setReplyOneCustomId(Integer replyOneCustomId);
    
    /**
     * Sets the like of this Comment. The like field corresponds to the database
     * column c04cinema.c04cinema.comment.like.
     * 
     * @param like to set of this Comment
     * @return     this Comment instance
     */
    Comment setLike(Integer like);
    
    /**
     * Sets the emotion of this Comment. The emotion field corresponds to the
     * database column c04cinema.c04cinema.comment.emotion.
     * 
     * @param emotion to set of this Comment
     * @return        this Comment instance
     */
    Comment setEmotion(String emotion);
    
    /**
     * Sets the replyTwoCustomId of this Comment. The replyTwoCustomId field
     * corresponds to the database column
     * c04cinema.c04cinema.comment.reply_two_custom_id.
     * 
     * @param replyTwoCustomId to set of this Comment
     * @return                 this Comment instance
     */
    Comment setReplyTwoCustomId(Integer replyTwoCustomId);
    
    /**
     * Queries the specified manager for the referenced Customer. If no such
     * Customer exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Customer> findCustomerId(Manager<Customer> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Movie. If no such Movie
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Movie> findMovieId(Manager<Movie> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Comment> {
        
        ID                  ("id"),
        CUSTOMER_ID         ("customer_id"),
        MOVIE_ID            ("movie_id"),
        COMMENT             ("comment"),
        CREATE_DATE         ("createDate"),
        REPLY_ONE_CUSTOM_ID ("reply_one_custom_id"),
        LIKE                ("like"),
        EMOTION             ("emotion"),
        REPLY_TWO_CUSTOM_ID ("reply_two_custom_id");
        
        private final String columnId;
        private final TableIdentifier<Comment> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "c04cinema";
        }
        
        @Override
        public String getSchemaId() {
            return "c04cinema";
        }
        
        @Override
        public String getTableId() {
            return "comment";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Comment> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}