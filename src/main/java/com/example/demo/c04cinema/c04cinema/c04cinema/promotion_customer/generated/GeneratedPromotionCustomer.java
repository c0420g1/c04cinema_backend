package com.example.demo.c04cinema.c04cinema.c04cinema.promotion_customer.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.customer.Customer;
import com.example.demo.c04cinema.c04cinema.c04cinema.promotion.Promotion;
import com.example.demo.c04cinema.c04cinema.c04cinema.promotion_customer.PromotionCustomer;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.promotion_customer.PromotionCustomer}-interface
 * representing entities of the {@code promotion_customer}-table in the
 * database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedPromotionCustomer {
    
    /**
     * This Field corresponds to the {@link PromotionCustomer} field that can be
     * obtained using the {@link PromotionCustomer#getId()} method.
     */
    IntField<PromotionCustomer, Integer> ID = IntField.create(
        Identifier.ID,
        PromotionCustomer::getId,
        PromotionCustomer::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link PromotionCustomer} field that can be
     * obtained using the {@link PromotionCustomer#getPromotionId()} method.
     */
    ComparableForeignKeyField<PromotionCustomer, Integer, Integer, Promotion> PROMOTION_ID = ComparableForeignKeyField.create(
        Identifier.PROMOTION_ID,
        o -> OptionalUtil.unwrap(o.getPromotionId()),
        PromotionCustomer::setPromotionId,
        Promotion.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link PromotionCustomer} field that can be
     * obtained using the {@link PromotionCustomer#getCustomerId()} method.
     */
    ComparableForeignKeyField<PromotionCustomer, Integer, Integer, Customer> CUSTOMER_ID = ComparableForeignKeyField.create(
        Identifier.CUSTOMER_ID,
        o -> OptionalUtil.unwrap(o.getCustomerId()),
        PromotionCustomer::setCustomerId,
        Customer.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link PromotionCustomer} field that can be
     * obtained using the {@link PromotionCustomer#getPromotionCode()} method.
     */
    StringField<PromotionCustomer, String> PROMOTION_CODE = StringField.create(
        Identifier.PROMOTION_CODE,
        o -> OptionalUtil.unwrap(o.getPromotionCode()),
        PromotionCustomer::setPromotionCode,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this PromotionCustomer. The id field corresponds to the
     * database column c04cinema.c04cinema.promotion_customer.id.
     * 
     * @return the id of this PromotionCustomer
     */
    int getId();
    
    /**
     * Returns the promotionId of this PromotionCustomer. The promotionId field
     * corresponds to the database column
     * c04cinema.c04cinema.promotion_customer.promotion_id.
     * 
     * @return the promotionId of this PromotionCustomer
     */
    OptionalInt getPromotionId();
    
    /**
     * Returns the customerId of this PromotionCustomer. The customerId field
     * corresponds to the database column
     * c04cinema.c04cinema.promotion_customer.customer_id.
     * 
     * @return the customerId of this PromotionCustomer
     */
    OptionalInt getCustomerId();
    
    /**
     * Returns the promotionCode of this PromotionCustomer. The promotionCode
     * field corresponds to the database column
     * c04cinema.c04cinema.promotion_customer.promotion_code.
     * 
     * @return the promotionCode of this PromotionCustomer
     */
    Optional<String> getPromotionCode();
    
    /**
     * Sets the id of this PromotionCustomer. The id field corresponds to the
     * database column c04cinema.c04cinema.promotion_customer.id.
     * 
     * @param id to set of this PromotionCustomer
     * @return   this PromotionCustomer instance
     */
    PromotionCustomer setId(int id);
    
    /**
     * Sets the promotionId of this PromotionCustomer. The promotionId field
     * corresponds to the database column
     * c04cinema.c04cinema.promotion_customer.promotion_id.
     * 
     * @param promotionId to set of this PromotionCustomer
     * @return            this PromotionCustomer instance
     */
    PromotionCustomer setPromotionId(Integer promotionId);
    
    /**
     * Sets the customerId of this PromotionCustomer. The customerId field
     * corresponds to the database column
     * c04cinema.c04cinema.promotion_customer.customer_id.
     * 
     * @param customerId to set of this PromotionCustomer
     * @return           this PromotionCustomer instance
     */
    PromotionCustomer setCustomerId(Integer customerId);
    
    /**
     * Sets the promotionCode of this PromotionCustomer. The promotionCode field
     * corresponds to the database column
     * c04cinema.c04cinema.promotion_customer.promotion_code.
     * 
     * @param promotionCode to set of this PromotionCustomer
     * @return              this PromotionCustomer instance
     */
    PromotionCustomer setPromotionCode(String promotionCode);
    
    /**
     * Queries the specified manager for the referenced Promotion. If no such
     * Promotion exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Promotion> findPromotionId(Manager<Promotion> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Customer. If no such
     * Customer exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Customer> findCustomerId(Manager<Customer> foreignManager);
    
    enum Identifier implements ColumnIdentifier<PromotionCustomer> {
        
        ID             ("id"),
        PROMOTION_ID   ("promotion_id"),
        CUSTOMER_ID    ("customer_id"),
        PROMOTION_CODE ("promotion_code");
        
        private final String columnId;
        private final TableIdentifier<PromotionCustomer> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "c04cinema";
        }
        
        @Override
        public String getSchemaId() {
            return "c04cinema";
        }
        
        @Override
        public String getTableId() {
            return "promotion_customer";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<PromotionCustomer> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}