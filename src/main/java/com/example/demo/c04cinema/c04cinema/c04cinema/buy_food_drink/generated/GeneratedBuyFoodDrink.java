package com.example.demo.c04cinema.c04cinema.c04cinema.buy_food_drink.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.buy_food_drink.BuyFoodDrink;
import com.example.demo.c04cinema.c04cinema.c04cinema.customer.Customer;
import com.example.demo.c04cinema.c04cinema.c04cinema.food_drink.FoodDrink;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.buy_food_drink.BuyFoodDrink}-interface
 * representing entities of the {@code buy_food_drink}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedBuyFoodDrink {
    
    /**
     * This Field corresponds to the {@link BuyFoodDrink} field that can be
     * obtained using the {@link BuyFoodDrink#getId()} method.
     */
    IntField<BuyFoodDrink, Integer> ID = IntField.create(
        Identifier.ID,
        BuyFoodDrink::getId,
        BuyFoodDrink::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link BuyFoodDrink} field that can be
     * obtained using the {@link BuyFoodDrink#getFoodDrinkId()} method.
     */
    ComparableForeignKeyField<BuyFoodDrink, Integer, Integer, FoodDrink> FOOD_DRINK_ID = ComparableForeignKeyField.create(
        Identifier.FOOD_DRINK_ID,
        o -> OptionalUtil.unwrap(o.getFoodDrinkId()),
        BuyFoodDrink::setFoodDrinkId,
        FoodDrink.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link BuyFoodDrink} field that can be
     * obtained using the {@link BuyFoodDrink#getQuantity()} method.
     */
    ComparableField<BuyFoodDrink, Integer, Integer> QUANTITY = ComparableField.create(
        Identifier.QUANTITY,
        o -> OptionalUtil.unwrap(o.getQuantity()),
        BuyFoodDrink::setQuantity,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link BuyFoodDrink} field that can be
     * obtained using the {@link BuyFoodDrink#getCustomerId()} method.
     */
    ComparableForeignKeyField<BuyFoodDrink, Integer, Integer, Customer> CUSTOMER_ID = ComparableForeignKeyField.create(
        Identifier.CUSTOMER_ID,
        o -> OptionalUtil.unwrap(o.getCustomerId()),
        BuyFoodDrink::setCustomerId,
        Customer.ID,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this BuyFoodDrink. The id field corresponds to the
     * database column c04cinema.c04cinema.buy_food_drink.id.
     * 
     * @return the id of this BuyFoodDrink
     */
    int getId();
    
    /**
     * Returns the foodDrinkId of this BuyFoodDrink. The foodDrinkId field
     * corresponds to the database column
     * c04cinema.c04cinema.buy_food_drink.food_drink_id.
     * 
     * @return the foodDrinkId of this BuyFoodDrink
     */
    OptionalInt getFoodDrinkId();
    
    /**
     * Returns the quantity of this BuyFoodDrink. The quantity field corresponds
     * to the database column c04cinema.c04cinema.buy_food_drink.quantity.
     * 
     * @return the quantity of this BuyFoodDrink
     */
    OptionalInt getQuantity();
    
    /**
     * Returns the customerId of this BuyFoodDrink. The customerId field
     * corresponds to the database column
     * c04cinema.c04cinema.buy_food_drink.customer_id.
     * 
     * @return the customerId of this BuyFoodDrink
     */
    OptionalInt getCustomerId();
    
    /**
     * Sets the id of this BuyFoodDrink. The id field corresponds to the
     * database column c04cinema.c04cinema.buy_food_drink.id.
     * 
     * @param id to set of this BuyFoodDrink
     * @return   this BuyFoodDrink instance
     */
    BuyFoodDrink setId(int id);
    
    /**
     * Sets the foodDrinkId of this BuyFoodDrink. The foodDrinkId field
     * corresponds to the database column
     * c04cinema.c04cinema.buy_food_drink.food_drink_id.
     * 
     * @param foodDrinkId to set of this BuyFoodDrink
     * @return            this BuyFoodDrink instance
     */
    BuyFoodDrink setFoodDrinkId(Integer foodDrinkId);
    
    /**
     * Sets the quantity of this BuyFoodDrink. The quantity field corresponds to
     * the database column c04cinema.c04cinema.buy_food_drink.quantity.
     * 
     * @param quantity to set of this BuyFoodDrink
     * @return         this BuyFoodDrink instance
     */
    BuyFoodDrink setQuantity(Integer quantity);
    
    /**
     * Sets the customerId of this BuyFoodDrink. The customerId field
     * corresponds to the database column
     * c04cinema.c04cinema.buy_food_drink.customer_id.
     * 
     * @param customerId to set of this BuyFoodDrink
     * @return           this BuyFoodDrink instance
     */
    BuyFoodDrink setCustomerId(Integer customerId);
    
    /**
     * Queries the specified manager for the referenced FoodDrink. If no such
     * FoodDrink exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<FoodDrink> findFoodDrinkId(Manager<FoodDrink> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Customer. If no such
     * Customer exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Customer> findCustomerId(Manager<Customer> foreignManager);
    
    enum Identifier implements ColumnIdentifier<BuyFoodDrink> {
        
        ID            ("id"),
        FOOD_DRINK_ID ("food_drink_id"),
        QUANTITY      ("quantity"),
        CUSTOMER_ID   ("customer_id");
        
        private final String columnId;
        private final TableIdentifier<BuyFoodDrink> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "c04cinema";
        }
        
        @Override
        public String getSchemaId() {
            return "c04cinema";
        }
        
        @Override
        public String getTableId() {
            return "buy_food_drink";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<BuyFoodDrink> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}