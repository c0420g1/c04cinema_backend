package com.example.demo.c04cinema.c04cinema.c04cinema.customer.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.customer.Customer;
import com.example.demo.c04cinema.c04cinema.c04cinema.customer.CustomerImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.util.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.customer.Customer} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedCustomerSqlAdapter implements SqlAdapter<Customer> {
    
    private final TableIdentifier<Customer> tableIdentifier;
    
    protected GeneratedCustomerSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("c04cinema", "c04cinema", "customer");
    }
    
    protected Customer apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(                resultSet.getInt(1 + offset))
            .setName(              resultSet.getString(2 + offset))
            .setAddress(           resultSet.getString(3 + offset))
            .setCustomerTypeId(    getInt(resultSet, 4 + offset))
            .setCurrentBonusPoint( getInt(resultSet, 5 + offset))
            .setAccountId(         getInt(resultSet, 6 + offset))
            .setEmail(             resultSet.getString(7 + offset))
            .setBirthday(          resultSet.getDate(8 + offset))
            .setPhone(             resultSet.getString(9 + offset))
            .setIsactive(          getByte(resultSet, 10 + offset))
            .setGender(            resultSet.getString(11 + offset))
            .setCardid(            resultSet.getString(12 + offset))
            .setCode(              resultSet.getString(13 + offset))
            .setImageUrl(          resultSet.getString(14 + offset))
            ;
    }
    
    protected CustomerImpl createEntity() {
        return new CustomerImpl();
    }
    
    @Override
    public TableIdentifier<Customer> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Customer> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Customer> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}