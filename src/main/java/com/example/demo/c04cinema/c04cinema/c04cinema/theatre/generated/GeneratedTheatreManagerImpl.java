package com.example.demo.c04cinema.c04cinema.c04cinema.theatre.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.theatre.Theatre;
import com.example.demo.c04cinema.c04cinema.c04cinema.theatre.TheatreImpl;
import com.example.demo.c04cinema.c04cinema.c04cinema.theatre.TheatreManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.AbstractManager;
import com.speedment.runtime.field.Field;

import java.util.stream.Stream;

/**
 * The generated base implementation for the manager of every {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.theatre.Theatre} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedTheatreManagerImpl 
extends AbstractManager<Theatre> 
implements GeneratedTheatreManager {
    
    private final TableIdentifier<Theatre> tableIdentifier;
    
    protected GeneratedTheatreManagerImpl() {
        this.tableIdentifier = TableIdentifier.of("c04cinema", "c04cinema", "theatre");
    }
    
    @Override
    public Theatre create() {
        return new TheatreImpl();
    }
    
    @Override
    public TableIdentifier<Theatre> getTableIdentifier() {
        return tableIdentifier;
    }
    
    @Override
    public Stream<Field<Theatre>> fields() {
        return TheatreManager.FIELDS.stream();
    }
    
    @Override
    public Stream<Field<Theatre>> primaryKeyFields() {
        return Stream.of(
            Theatre.ID
        );
    }
}