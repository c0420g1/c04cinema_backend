package com.example.demo.c04cinema.c04cinema.c04cinema.hall.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.hall.Hall;
import com.example.demo.c04cinema.c04cinema.c04cinema.hall_type.HallType;
import com.example.demo.c04cinema.c04cinema.c04cinema.theatre.Theatre;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.hall.Hall}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedHallImpl implements Hall {
    
    private int id;
    private String name;
    private Integer seatQuantity;
    private Integer hallTypeId;
    private Integer theatreId;
    
    protected GeneratedHallImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public Optional<String> getName() {
        return Optional.ofNullable(name);
    }
    
    @Override
    public OptionalInt getSeatQuantity() {
        return OptionalUtil.ofNullable(seatQuantity);
    }
    
    @Override
    public OptionalInt getHallTypeId() {
        return OptionalUtil.ofNullable(hallTypeId);
    }
    
    @Override
    public OptionalInt getTheatreId() {
        return OptionalUtil.ofNullable(theatreId);
    }
    
    @Override
    public Hall setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Hall setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public Hall setSeatQuantity(Integer seatQuantity) {
        this.seatQuantity = seatQuantity;
        return this;
    }
    
    @Override
    public Hall setHallTypeId(Integer hallTypeId) {
        this.hallTypeId = hallTypeId;
        return this;
    }
    
    @Override
    public Hall setTheatreId(Integer theatreId) {
        this.theatreId = theatreId;
        return this;
    }
    
    @Override
    public Optional<HallType> findHallTypeId(Manager<HallType> foreignManager) {
        if (getHallTypeId().isPresent()) {
            return foreignManager.stream().filter(HallType.ID.equal(getHallTypeId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<Theatre> findTheatreId(Manager<Theatre> foreignManager) {
        if (getTheatreId().isPresent()) {
            return foreignManager.stream().filter(Theatre.ID.equal(getTheatreId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "           + Objects.toString(getId()));
        sj.add("name = "         + Objects.toString(OptionalUtil.unwrap(getName())));
        sj.add("seatQuantity = " + Objects.toString(OptionalUtil.unwrap(getSeatQuantity())));
        sj.add("hallTypeId = "   + Objects.toString(OptionalUtil.unwrap(getHallTypeId())));
        sj.add("theatreId = "    + Objects.toString(OptionalUtil.unwrap(getTheatreId())));
        return "HallImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Hall)) { return false; }
        final Hall thatHall = (Hall)that;
        if (this.getId() != thatHall.getId()) { return false; }
        if (!Objects.equals(this.getName(), thatHall.getName())) { return false; }
        if (!Objects.equals(this.getSeatQuantity(), thatHall.getSeatQuantity())) { return false; }
        if (!Objects.equals(this.getHallTypeId(), thatHall.getHallTypeId())) { return false; }
        if (!Objects.equals(this.getTheatreId(), thatHall.getTheatreId())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getName()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getSeatQuantity()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getHallTypeId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getTheatreId()));
        return hash;
    }
}