package com.example.demo.c04cinema.c04cinema.c04cinema.payment.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.payment.Payment;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;

/**
 * The generated base for the {@link
 * com.example.demo.c04cinema.c04cinema.c04cinema.payment.Payment}-interface
 * representing entities of the {@code payment}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedPayment {
    
    /**
     * This Field corresponds to the {@link Payment} field that can be obtained
     * using the {@link Payment#getId()} method.
     */
    IntField<Payment, Integer> ID = IntField.create(
        Identifier.ID,
        Payment::getId,
        Payment::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Payment} field that can be obtained
     * using the {@link Payment#getName()} method.
     */
    StringField<Payment, String> NAME = StringField.create(
        Identifier.NAME,
        o -> OptionalUtil.unwrap(o.getName()),
        Payment::setName,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Payment. The id field corresponds to the database
     * column c04cinema.c04cinema.payment.id.
     * 
     * @return the id of this Payment
     */
    int getId();
    
    /**
     * Returns the name of this Payment. The name field corresponds to the
     * database column c04cinema.c04cinema.payment.name.
     * 
     * @return the name of this Payment
     */
    Optional<String> getName();
    
    /**
     * Sets the id of this Payment. The id field corresponds to the database
     * column c04cinema.c04cinema.payment.id.
     * 
     * @param id to set of this Payment
     * @return   this Payment instance
     */
    Payment setId(int id);
    
    /**
     * Sets the name of this Payment. The name field corresponds to the database
     * column c04cinema.c04cinema.payment.name.
     * 
     * @param name to set of this Payment
     * @return     this Payment instance
     */
    Payment setName(String name);
    
    enum Identifier implements ColumnIdentifier<Payment> {
        
        ID   ("id"),
        NAME ("name");
        
        private final String columnId;
        private final TableIdentifier<Payment> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "c04cinema";
        }
        
        @Override
        public String getSchemaId() {
            return "c04cinema";
        }
        
        @Override
        public String getTableId() {
            return "payment";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Payment> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}