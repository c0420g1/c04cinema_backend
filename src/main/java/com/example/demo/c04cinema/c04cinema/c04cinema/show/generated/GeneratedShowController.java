package com.example.demo.c04cinema.c04cinema.c04cinema.show.generated;

import com.example.demo.c04cinema.c04cinema.c04cinema.show.Show;
import com.example.demo.c04cinema.c04cinema.c04cinema.show.ShowManager;
import com.example.demo.c04cinema.c04cinema.c04cinema.show.generated.GeneratedShow.Identifier;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.json.Json;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.field.Field;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;

import java.sql.Timestamp;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for Show entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
public abstract class GeneratedShowController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired ShowManager manager;
    protected JsonEncoder<Show> encoder;
    
    @PostConstruct
    void createShowEncoder() {
        encoder = jsonComponent.<Show>emptyEncoder()
            .put("id", Show.ID)
            .put("startTime", Show.START_TIME)
            .put("hallId", Show.HALL_ID)
            .put("movieId", Show.MOVIE_ID)
            .put("price", Show.PRICE)
            .put("description", Show.DESCRIPTION)
            .put("isearly", Show.ISEARLY)
            .build();
    }
    
    @GetMapping(path = "/show", produces = "application/json")
    public String get(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return getHelper(
            ControllerUtil.parseFilters(filters, ShowFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, ShowSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    @ResponseStatus(code = HttpStatus.CREATED)
    @PostMapping(path = "/show", consumes = "application/json")
    public void create(
            @RequestBody @Validated CreateBody createBody) {
        manager.persist(manager.create()
            .setStartTime(createBody.getStartTime())
            .setHallId(createBody.getHallId())
            .setMovieId(createBody.getMovieId())
            .setPrice(createBody.getPrice())
            .setDescription(createBody.getDescription())
            .setIsearly(createBody.getIsearly())
        );
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @PatchMapping(path = "/show/{id}", consumes = "application/json")
    public void update(
            @PathVariable(name = "id") int id,
            @RequestBody @Validated UpdateBody updateBody) {
        manager.stream()
            .filter(Show.ID.equal(id))
            .map(show -> {
                show.setStartTime(updateBody.getStartTime());
                show.setHallId(updateBody.getHallId());
                show.setMovieId(updateBody.getMovieId());
                show.setPrice(updateBody.getPrice());
                show.setDescription(updateBody.getDescription());
                show.setIsearly(updateBody.getIsearly());
                return show;
        }).forEach(manager.updater());
    }
    
    @ResponseStatus(code = HttpStatus.NO_CONTENT)
    @DeleteMapping(path = "/show/{id}")
    public void delete(
            @PathVariable(name = "id") int id) {
        manager.stream()
            .filter(Show.ID.equal(id))
            .forEach(manager.remover());
    }
    
    @ExceptionHandler(JsonMappingException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleMissingValueError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: missing required fields");
        
        return Json.toJson(error, true);
    }
    
    @ExceptionHandler(JsonParseException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleInvalidJsonError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: invalid JSON syntax");
        
        return Json.toJson(error, true);
    }
    
    protected final Set<Identifier> parseColumns(String jsonColumnList) {
        try {
            @SuppressWarnings("unchecked")
            final List<String> parsed = (List<String>) Json.fromJson(jsonColumnList);
            final Set<GeneratedShow.Identifier> result = EnumSet.noneOf(GeneratedShow.Identifier.class);
            parsed.stream().map(this::parseColumn).forEach(result::add);
            return result;
        } catch (final ClassCastException ex) {
            throw new IllegalArgumentException("Error in parsed JSON.");
        }
    }
    
    protected final Identifier parseColumn(String jsonColumn) {
        switch (jsonColumn) {
            case "id":          return GeneratedShow.Identifier.ID;
            case "startTime":   return GeneratedShow.Identifier.START_TIME;
            case "hallId":      return GeneratedShow.Identifier.HALL_ID;
            case "movieId":     return GeneratedShow.Identifier.MOVIE_ID;
            case "price":       return GeneratedShow.Identifier.PRICE;
            case "description": return GeneratedShow.Identifier.DESCRIPTION;
            case "isearly":     return GeneratedShow.Identifier.ISEARLY;
            default: throw new IllegalArgumentException(
                "Unknown column '" + jsonColumn + "'."
            );
        }
    }
    
    protected final Field<Show> fieldOf(Identifier columnId) {
        switch (columnId) {
            case ID:          return Show.ID;
            case START_TIME:  return Show.START_TIME;
            case HALL_ID:     return Show.HALL_ID;
            case MOVIE_ID:    return Show.MOVIE_ID;
            case PRICE:       return Show.PRICE;
            case DESCRIPTION: return Show.DESCRIPTION;
            case ISEARLY:     return Show.ISEARLY;
            default: throw new IllegalArgumentException(
                "Unknown column '" + columnId + "'."
            );
        }
    }
    
    protected String getHelper(
            List<Predicate<Show>> predicates,
            List<Comparator<Show>> sorters,
            long start,
            long limit) {
        Stream<Show> stream = manager.stream();
        
        for (final Predicate<Show> predicate : predicates) {
            stream = stream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<Show>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        return stream
            .skip(start)
            .limit(limit)
            .collect(JsonCollectors.toList(encoder));
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public static final class ShowFilter extends AbstractFilter<Show> {
        
        public ShowFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<Show> toPredicate() {
            switch (property()) {
                case "id" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Show.ID.equal(v);
                        case "ne"   : return Show.ID.notEqual(v);
                        case "lt"   : return Show.ID.lessThan(v);
                        case "le"   : return Show.ID.lessOrEqual(v);
                        case "gt"   : return Show.ID.greaterThan(v);
                        case "ge"   : return Show.ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Show.id."
                        );
                    }
                }
                case "startTime" : {
                    final Timestamp v = Timestamp.valueOf(value());
                    switch (operator()) {
                        case "eq"   : return Show.START_TIME.equal(v);
                        case "ne"   : return Show.START_TIME.notEqual(v);
                        case "lt"   : return Show.START_TIME.lessThan(v);
                        case "le"   : return Show.START_TIME.lessOrEqual(v);
                        case "gt"   : return Show.START_TIME.greaterThan(v);
                        case "ge"   : return Show.START_TIME.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Show.startTime."
                        );
                    }
                }
                case "hallId" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Show.HALL_ID.equal(v);
                        case "ne"   : return Show.HALL_ID.notEqual(v);
                        case "lt"   : return Show.HALL_ID.lessThan(v);
                        case "le"   : return Show.HALL_ID.lessOrEqual(v);
                        case "gt"   : return Show.HALL_ID.greaterThan(v);
                        case "ge"   : return Show.HALL_ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Show.hallId."
                        );
                    }
                }
                case "movieId" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Show.MOVIE_ID.equal(v);
                        case "ne"   : return Show.MOVIE_ID.notEqual(v);
                        case "lt"   : return Show.MOVIE_ID.lessThan(v);
                        case "le"   : return Show.MOVIE_ID.lessOrEqual(v);
                        case "gt"   : return Show.MOVIE_ID.greaterThan(v);
                        case "ge"   : return Show.MOVIE_ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Show.movieId."
                        );
                    }
                }
                case "price" : {
                    final Double v = Double.parseDouble(value());
                    switch (operator()) {
                        case "eq"   : return Show.PRICE.equal(v);
                        case "ne"   : return Show.PRICE.notEqual(v);
                        case "lt"   : return Show.PRICE.lessThan(v);
                        case "le"   : return Show.PRICE.lessOrEqual(v);
                        case "gt"   : return Show.PRICE.greaterThan(v);
                        case "ge"   : return Show.PRICE.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Show.price."
                        );
                    }
                }
                case "description" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Show.DESCRIPTION.equal(v);
                        case "ne"   : return Show.DESCRIPTION.notEqual(v);
                        case "lt"   : return Show.DESCRIPTION.lessThan(v);
                        case "le"   : return Show.DESCRIPTION.lessOrEqual(v);
                        case "gt"   : return Show.DESCRIPTION.greaterThan(v);
                        case "ge"   : return Show.DESCRIPTION.greaterOrEqual(v);
                        case "like" : return Show.DESCRIPTION.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Show.description."
                        );
                    }
                }
                case "isearly" : {
                    final Byte v = Byte.parseByte(value());
                    switch (operator()) {
                        case "eq"   : return Show.ISEARLY.equal(v);
                        case "ne"   : return Show.ISEARLY.notEqual(v);
                        case "lt"   : return Show.ISEARLY.lessThan(v);
                        case "le"   : return Show.ISEARLY.lessOrEqual(v);
                        case "gt"   : return Show.ISEARLY.greaterThan(v);
                        case "ge"   : return Show.ISEARLY.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Show.isearly."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Show property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public static final class ShowSort extends AbstractSort<Show> {
        
        public ShowSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<Show> toComparator() {
            final Comparator<Show> comparator;
            switch (property()) {
                case "id"          : comparator = Show.ID.comparator();          break;
                case "startTime"   : comparator = Show.START_TIME.comparator();  break;
                case "hallId"      : comparator = Show.HALL_ID.comparator();     break;
                case "movieId"     : comparator = Show.MOVIE_ID.comparator();    break;
                case "price"       : comparator = Show.PRICE.comparator();       break;
                case "description" : comparator = Show.DESCRIPTION.comparator(); break;
                case "isearly"     : comparator = Show.ISEARLY.comparator();     break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Show property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class CreateBody {
        
        private final Timestamp startTime;
        private final Integer hallId;
        private final Integer movieId;
        private final Double price;
        private final String description;
        private final Byte isearly;
        
        @JsonCreator
        public CreateBody(
                @JsonProperty("startTime") Timestamp startTime,
                @JsonProperty("hallId") Integer hallId,
                @JsonProperty("movieId") Integer movieId,
                @JsonProperty("price") Double price,
                @JsonProperty("description") String description,
                @JsonProperty("isearly") Byte isearly) {
            this.startTime = Objects.requireNonNull(startTime, "`startTime` is required");
            this.hallId = Objects.requireNonNull(hallId, "`hallId` is required");
            this.movieId = Objects.requireNonNull(movieId, "`movieId` is required");
            this.price = Objects.requireNonNull(price, "`price` is required");
            this.description = Objects.requireNonNull(description, "`description` is required");
            this.isearly = Objects.requireNonNull(isearly, "`isearly` is required");
        }
        
        public Timestamp getStartTime() {
            return this.startTime;
        }
        
        public Integer getHallId() {
            return this.hallId;
        }
        
        public Integer getMovieId() {
            return this.movieId;
        }
        
        public Double getPrice() {
            return this.price;
        }
        
        public String getDescription() {
            return this.description;
        }
        
        public Byte getIsearly() {
            return this.isearly;
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class UpdateBody {
        
        private final Timestamp startTime;
        private final Integer hallId;
        private final Integer movieId;
        private final Double price;
        private final String description;
        private final Byte isearly;
        
        @JsonCreator
        public UpdateBody(
                @JsonProperty("startTime") Timestamp startTime,
                @JsonProperty("hallId") Integer hallId,
                @JsonProperty("movieId") Integer movieId,
                @JsonProperty("price") Double price,
                @JsonProperty("description") String description,
                @JsonProperty("isearly") Byte isearly) {
            this.startTime = Objects.requireNonNull(startTime, "`startTime` is required");
            this.hallId = Objects.requireNonNull(hallId, "`hallId` is required");
            this.movieId = Objects.requireNonNull(movieId, "`movieId` is required");
            this.price = Objects.requireNonNull(price, "`price` is required");
            this.description = Objects.requireNonNull(description, "`description` is required");
            this.isearly = Objects.requireNonNull(isearly, "`isearly` is required");
        }
        
        public Timestamp getStartTime() {
            return this.startTime;
        }
        
        public Integer getHallId() {
            return this.hallId;
        }
        
        public Integer getMovieId() {
            return this.movieId;
        }
        
        public Double getPrice() {
            return this.price;
        }
        
        public String getDescription() {
            return this.description;
        }
        
        public Byte getIsearly() {
            return this.isearly;
        }
    }
}